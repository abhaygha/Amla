
  name: Z10 DEV LOCAL BUILD DEPLOY

  on:

     workflow_call:

      inputs:
        tenant:
          description: 'Tenant'
          required: true
          default: 'z10'
          type: string
        environment:
          description: 'The target environment for deployment'
          required: true
          type: string
        branch:
          description: 'The branch to deploy from'
          required: true
          type: string
        namespace:
          description: 'Target namespace'
          required: true
          type: string
        all:
          description: 'Build Deploy ALL'
          required: false
          type: boolean
          default: false
        services:
          description: 'Deploy Applications (Set the following values to true)'
          required: false
          default: '{"wbst": false, "pgbld": false, "admin": false, "api": false, "gateway": false, "customtable": false, "v2": false, "a-commerce": false, "portal": false, "cstm": false, "paymngr": false, "spreedly": false, "braintree": false, "reports": false, "shipping": false, "fedex": false, "ups": false, "azfunction": false, "graphqlapi": false, "taxmanager": false, "avatax": false, "diagno": false, "python": false}'
          type: string

  env:
    IMAGE_TAG: z10-${{ github.event.inputs.environment }}


  jobs:
    # Parse the JSON input and create an environment variable listing all services that need deployment
    parse_services:
      runs-on: ubuntu-latest
      outputs:
        services_list: ${{ steps.set_services.outputs.services_list }}
      steps:
        - name: Parse services JSON
          id: set_services
          run: |
            if [[ "${{ github.event.inputs.all }}" == "true" ]]; then
              SERVICES="wbst,pgbld,admin,api,gateway,customtable,v2,a-commerce,portal,cstm,paymngr,spreedly,braintree,reports,shipping,fedex,ups,azfunction,graphqlapi,taxmanager,avatax"
            else
              SERVICES=$(echo '${{ github.event.inputs.services }}' | jq -r 'to_entries[] | select(.value == true) | .key' | paste -sd "," -)
            fi
            echo "Services to deploy: $SERVICES"
            echo "::set-output name=services_list::${SERVICES}"

        - name: Debug services list
          run: |
            echo "Services list: ${{ steps.set_services.outputs.services_list }}"

          
    webstore_deployment:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'wbst') || github.event.inputs.all == 'true'

      steps:
                
        - name: Checkout Webstore Repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode-webstore10x-page-builder
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}
      
        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build and Push
          working-directory: ./
          run: |
            echo "Creating .env file dynamically during runtime..."
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            echo "AppName=webstore" >> .env
            echo "FilePath=./apps/webstore/Dockerfile" >> .env
            echo "ImageName=znode10xwebstoreimage" >> .env
            echo "Generated .env file contents:"
            cat .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures

    pagebuilder_deployment:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'pgbld') || github.event.inputs.all == 'true'

      steps:
      
        - name: Checkout Webstore Repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode-webstore10x-page-builder
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}
      
        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build and Push
          working-directory: ./
          run: |
            echo "Creating .env file dynamically during runtime..."
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            echo "AppName=page-builder" >> .env
            echo "FilePath=./apps/page-builder/Dockerfile" >> .env
            echo "ImageName=znode10xpagebuilder" >> .env
            echo "Generated .env file contents:"
            cat .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures
          
    admin_deployment:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'admin') || github.event.inputs.all == 'true'

      steps:
      
        - name: Checkout Admin Repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-admin-migration
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}

        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build and Push
          working-directory: ./Znode.Admin
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures         


    api_deployment:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'api') || github.event.inputs.all == 'true'

      steps:

                
        - name: Checkout API Repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-api-migration
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}

        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build and Push
          working-directory: ./Znode.Multifront
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures
          
    gateway_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'gateway') || github.event.inputs.all == 'true'
      steps:

                
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-api-gateways
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}

        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build and Push
          working-directory: ./Znode.APIGateways
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures
          
    customtable_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'customtable') || github.event.inputs.all == 'true'
      steps:

        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-api-migration
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}

        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build and Push
          working-directory: ./Znode.Multifront
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose-customtable.yml build --no-cache
            docker compose -f docker-compose-customtable.yml push --ignore-push-failures
      
  
    api-v2_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'v2') || github.event.inputs.all == 'true'
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-api-migration
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}

        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build and Push
          working-directory: ./Znode.Multifront
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose-v2-api.yml build --no-cache
            docker compose -f docker-compose-v2-api.yml push --ignore-push-failures

    apicp_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'a-commerce') || github.event.inputs.all == 'true'
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-commerceportal-api
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}


        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build 
          working-directory: Znode_CommercePortal/
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures

    cp_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'portal') || github.event.inputs.all == 'true'
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-commerceportal
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}

        - name: Docker Login
          uses: docker/login-action@v2
          with:
              username: ${{ secrets.DEV_ACRUN }}
              password: ${{ secrets.DEV_ACRPW }}
              registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build 
          working-directory: .
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures

    customapi_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'cstm') || github.event.inputs.all == 'true'
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-customapi-sdk
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}

        - name: Docker Login
          uses: docker/login-action@v2
          with:
              username: ${{ secrets.DEV_ACRUN }}
              password: ${{ secrets.DEV_ACRPW }}
              registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build 
          working-directory: .
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures

    payment_manager_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'paymngr') || github.event.inputs.all == 'true'

      steps:
        - name: Checkout repository
          uses: actions/checkout@v2  
          with:
            repository: MRRSoft/znode10-payment-manager
            token: ${{ secrets.ACCESS_REPO }} 
            ref: ${{ github.event.inputs.branch }}

                    
        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build 
          working-directory: ./API/Znode.Payment.Manager/ 
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures

    plugin_spreedly_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'spreedly') || github.event.inputs.all == 'true'

      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-plugin-payment-spreedly
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}
          
        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build 
          working-directory: ./API
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures

    plugin_braintree_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'braintree') || github.event.inputs.all == 'true'

      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-plugin-payment-braintree
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}

        
        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build 
          working-directory: ./API
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures

  ######## Reports############

    reports_api_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'reports') || github.event.inputs.all == 'true'

      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-reports-api
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}

        
        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build 
          working-directory: ./Znode.Reports
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures

  ######## shipping manager

    shipping_manager_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'shipping') || github.event.inputs.all == 'true'

      steps:
        - name: Checkout repositor
          uses: actions/checkout@v2  
          with:
            repository: MRRSoft/znode10-shipping-manager
            token: ${{ secrets.ACCESS_REPO }} 
            ref: ${{ github.event.inputs.branch }}

                    
        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build 
          working-directory: ./API/Znode.Shipping.Manager/ 
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures

    plugin_fedex_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'fedex') || github.event.inputs.all == 'true'
        
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-plugin-shipping-fedex
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}
          
        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build 
          working-directory: ./API/Znode.Plugin.Shipping.Fedex/
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures

    plugin_ups_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'ups') || github.event.inputs.all == 'true'
        
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-plugin-shipping-ups
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}

          
        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build 
          working-directory: ./API/Znode.Plugin.Shipping.UPS/
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures

    azfunction_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'azfunction') || github.event.inputs.all == 'true'      
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-api-migration
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}

          
        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build 
          working-directory: ./Znode.AzureFunction
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose-azfunctions.yml build --no-cache
            docker compose -f docker-compose-azfunctions.yml push --ignore-push-failures

    graphqlapi_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'graphql') || github.event.inputs.all == 'true'
      
      steps:

        - name: Checkout API Repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-graphql-api
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}

        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build and Push
          working-directory: ./
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures

    taxmanager_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'taxmanager') || github.event.inputs.all == 'true'
              
      steps:
                
        - name: Checkout API Repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-tax-manager
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}

        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build and Push
          working-directory: ./API/Znode.Tax.Manager/
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures
            
    avatax_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'avatax') || github.event.inputs.all == 'true'
              
      steps:
                
        - name: Checkout API Repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-plugin-tax-avatax
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}

        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build and Push
          working-directory: ./API/Znode.Plugin.Tax.Avatax/
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures
        
    diagnostic_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'diagno') || github.event.inputs.all == 'true'
        
      steps:

        - name: Checkout API Repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode-diagnostic-app
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}

        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build and Push
          working-directory: ./
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures

    pythonapi_build:
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.environment }}
      needs: parse_services
      if: contains(needs.parse_services.outputs.services_list, 'python') || github.event.inputs.all == 'true'
        
      steps:

        - name: Checkout API Repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-publish-elasticindex
            token: ${{ secrets.ACCESS_REPO }}
            ref: ${{ github.event.inputs.branch }}

        - name: Docker Login
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DEV_ACRUN }}
            password: ${{ secrets.DEV_ACRPW }}
            registry: ${{ secrets.DEV_ACR_SERVER }}

        - name: Docker Compose Build and Push
          working-directory: ./
          run: |
            echo "Tag=${{ env.IMAGE_TAG }}" > .env
            echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}" >> .env
            docker compose -f docker-compose.yml build --no-cache
            docker compose -f docker-compose.yml push --ignore-push-failures

    deploy:
      name: Deploy Znode10x Helm Chart
      runs-on: [self-hosted, 100.195]
      environment: ${{ inputs.environment }}
      needs:
        - parse_services  
        - api_deployment
        - api-v2_build
        - customtable_build
        - gateway_build
        - azfunction_build
        - webstore_deployment
        - pagebuilder_deployment
        - admin_deployment
        - apicp_build
        - cp_build
        - customapi_build
        - payment_manager_build
        - plugin_spreedly_build
        - plugin_braintree_build
        - reports_api_build
        - shipping_manager_build
        - plugin_fedex_build
        - plugin_ups_build
        - graphqlapi_build
        - taxmanager_build
        - avatax_build
        - diagnostic_build
        - pythonapi_build
      if: always() && (
        needs.api_deployment.result == 'success' ||
        needs.api-v2_build.result == 'success' ||
        needs.customtable_build.result == 'success' ||
        needs.gateway_build.result == 'success' ||
        needs.azfunction_build.result == 'success' ||
        needs.webstore_deployment.result == 'success' ||
        needs.pagebuilder_deployment.result == 'success' ||
        needs.admin_deployment.result == 'success' ||
        needs.apicp_build.result == 'success' ||
        needs.cp_build.result == 'success' ||
        needs.customapi_build.result == 'success' ||
        needs.payment_manager_build.result == 'success' ||
        needs.plugin_spreedly_build.result == 'success' ||
        needs.plugin_braintree_build.result == 'success' ||
        needs.reports_api_build.result == 'success' ||
        needs.shipping_manager_build.result == 'success' ||
        needs.plugin_fedex_build.result == 'success' ||
        needs.plugin_ups_build.result == 'success' ||
        needs.taxmanager_build.result == 'success' ||
        needs.graphqlapi_build.result == 'success' ||
        needs.avatax_build.result == 'success'  ||
        needs.diagnostic_build.result == 'success' ||
        needs.pythonapi_build.result == 'success'
       )

      steps:
      - name: Checkout Teams Repo with Submodules
        uses: actions/checkout@v4
        with:
          ref: master
          submodules: recursive
          token: ${{ secrets.ACCESS_REPO }}

      - name: Update submodule to latest master
        run: |
          git submodule update --remote --checkout --recursive

      - name: Kubernetes Set up
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.2

      - name: Helm install znode10 chart
        working-directory: ./znode10-helm/znode-templates/helm-aks/znode10-helm
        run: |
          echo "Deploying to environment: ${{ github.event.inputs.tenant }}${{ github.event.inputs.environment }}"
          echo '${{ vars.IMAGE_TAGS  }}' > image_tags.json
          cat image_tags.json

          set_args=""
          for service in $(jq -r 'keys[]' image_tags.json); do
            tag=$(jq -r --arg svc "$service" '.[$svc]' image_tags.json)

            if [[ -n "$tag" && "$tag" != "null" && "$tag" != "" ]]; then
              echo "Using provided tag for $service: $tag"
            else
              echo "No tag for $service found in secrets. Fetching from cluster..."
              current_image=$(kubectl get deployment $service -n ${{ github.event.inputs.namespace }} -o jsonpath='{.spec.template.spec.containers[0].image}' || true)
              if [[ -n "$current_image" ]]; then
                current_tag=$(echo "$current_image" | awk -F':' '{print $2}')
                if [[ -n "$current_tag" ]]; then
                  echo "Using current running tag for $service: $current_tag"
                  tag="$current_tag"
                else
                  echo "❌ ERROR: No running tag found for $service. Cannot continue."
                  exit 1
                fi
              else
                echo "❌ ERROR: Deployment for $service not found. Cannot continue."
                exit 1
              fi
            fi

            set_args="$set_args --set-string resources.$service.image.tag=$tag"
          done

          echo "Final Helm args: $set_args"

          helm upgrade --install znode10x . \
            --namespace ${{ github.event.inputs.namespace }} \
            -f default-values.yml \
            -f internal-values.yml \
            -f ../../../../znode10-helm/${{ github.event.inputs.environment }}-values.yml \
            -f ingress-values.yml \
            -f ${{ vars.CATEGORY }}-values.yml \
            --set global.tenant=${{ github.event.inputs.tenant }} \
            --set global.environment=${{ github.event.inputs.environment }} \
            --set global.domain=${{ vars.URL }} \
            --set global.webstoreURL=${{ vars.WEBSTORE_URL }} \
            --set global.imageRegistry=${{ vars.ACR_SERVER }} \
            --set global.imagePullSecrets=${{ vars.BLACKBOX }} \
            --set global.tenantacr.imageRegistry=${{ vars.TENANT_ACR_SERVER }} \
            --set global.ingressClassName=nginx \
            $set_args

      - name: Conditional rollout restart for Selected Deployments
        run: |
          echo "Restarting deployments for: ${{ needs.parse_services.outputs.services_list }}"
          IFS=',' read -ra SERVICES <<< "${{ needs.parse_services.outputs.services_list }}"
          for svc in "${SERVICES[@]}"; do
            case "$svc" in
              api) DEP="znode10xapi" ;;
              v2) DEP="znode10xapiv2" ;;
              admin) DEP="znode10xadmin" ;;
              pgbld) DEP="znode10xpagebuilder" ;;
              wbst) DEP="znode10xwebstore" ;;
              gateway) DEP="znode10xapigateways" ;;
              customtable) DEP="znode10xcustomtable" ;;
              a-commerce) DEP="znode10xapicp" ;;
              portal) DEP="znode10xcp" ;;
              cstm) DEP="znode10customapi" ;;
              paymngr) DEP="znode10xpaymngr" ;;
              spreedly) DEP="znode10xpluginspreedly" ;;
              braintree) DEP="znode10xpluginbraintree" ;;
              reports) DEP="znode10xreports" ;;
              shipping) DEP="znode10xshipping" ;;
              fedex) DEP="znode10xpluginfedex" ;;
              ups) DEP="znode10xpluginups" ;;
              azfunction) DEP="znode10xazfunctions" ;;
              graphqlapi) DEP="znode10xgraphqlapi" ;;
              taxmanager) DEP="znode10xtaxmanager" ;;
              avatax) DEP="znode10xavatax" ;;
              diagno) DEP="znode10xdiagnostic" ;;
              python) DEP="znode10xutility" ;;
              
              *) echo "No deployment defined for: $svc"; continue ;;
            esac
            echo "Restarting deployment: $DEP"
            kubectl get deployment $DEP -n ${{ inputs.namespace }} >/dev/null 2>&1 \
            && kubectl rollout restart deployment $DEP -n ${{ inputs.namespace }} \
            || echo "Deployment $DEP not found. Skipping restart."
          done
