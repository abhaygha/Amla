name: Reusable Service Builder

on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      repository:
        required: true
        type: string
      ref:
        required: true
        type: string
      working_directory:
        required: true
        type: string
      compose_file:
        required: true
        type: string
      acr_server:
        required: true
        type: string
      environment:
        required: true
        type: string        
      release_version_number:
        required: true
        type: string
    secrets:
      access_token:
        required: true
      acr_username:
        required: true
      acr_password:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout Service Repo
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.access_token }}

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.acr_username }}
          password: ${{ secrets.acr_password }}
          registry: ${{ inputs.acr_server }}

      - name: Build and Push Docker Image
        working-directory: ${{ inputs.working_directory }}
        run: |
          echo "Tag=${{ inputs.release_version_number }}" > .env
          echo "AmlaRegistry=${{ inputs.acr_server }}" >> .env

          if [[ "${{ inputs.service }}" == "wbst" ]]; then
            echo "AppName=webstore" >> .env
            echo "FilePath=./apps/webstore/Dockerfile" >> .env
            echo "ImageName=znode10xwebstoreimage" >> .env
          elif [[ "${{ inputs.service }}" == "pgbld" ]]; then
            echo "AppName=page-builder" >> .env
            echo "FilePath=./apps/page-builder/Dockerfile" >> .env
            echo "ImageName=znode10xpagebuilder" >> .env
          fi

          docker compose -f ${{ inputs.compose_file }} build --no-cache
          docker compose -f ${{ inputs.compose_file }} push --ignore-push-failures
          docker compose -f ${{ inputs.compose_file }} images -q | xargs -r docker rmi -f
          
      - name: Notify Google Chat on Failure
        if: failure()
        run: |
          URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TRIGGERED_BY="${{ github.triggering_actor || github.actor }}"
          SERVICE="${{ inputs.service }}"
          ENV="${{ inputs.environment }}"
          TENANT="${{ inputs.tenant || 'z10' }}"
          BRANCH="${{ inputs.ref || github.ref_name }}"
    
          MESSAGE="ðŸ”´ *Service Build Failed:* \`${SERVICE}\`\n*Environment:* \`${ENV}\`\n*Tenant:* \`${TENANT}\`\n*Branch:* \`${BRANCH}\`\n*Triggered By:* \`${TRIGGERED_BY}\`\n[ðŸ”— View Run]($URL)"
          curl -X POST -H 'Content-Type: application/json' \
            -d "{\"text\": \"$MESSAGE\"}" \
            "${{ vars.ALERTS }}"
