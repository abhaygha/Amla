name: Reusable Service Deployer

on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      environment:
        required: true
        type: string
      namespace:
        required: true
        type: string
      tenant:
        required: true
        type: string
      image_tag:
        required: true
        type: string
    secrets:
      kubeconfig:
        required: true

jobs:
  deploy:
    runs-on: self-hosted
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout Teams Repo with Submodules
        uses: actions/checkout@v4
        with:
          ref: master
          submodules: recursive
          token: ${{ secrets.ACCESS_REPO }}

      - name: Update submodule to latest master
        run: git submodule update --remote --checkout --recursive

      - name: Kubernetes Set up
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.kubeconfig }}

      - name: Install jq
        run: |
          if [ "$RUNNER_OS" = "Windows" ]; then
            # Windows - jq should be pre-installed or use chocolatey
            echo "Running on Windows, checking jq availability"
          else
            # Linux - install jq
            sudo apt-get install -y jq
          fi

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.2

      - name: Deploy Service
        run: |
          echo "üöÄ Deploying ${{ inputs.service }} to ${{ inputs.environment }}"
          
          # Get current deployment status
          kubectl get deployment ${{ inputs.service }} -n ${{ inputs.namespace }} || echo "Deployment not found, will create new one"
          
          # Update image tag
          kubectl set image deployment/${{ inputs.service }} ${{ inputs.service }}=${{ vars.IMAGE_REGISTRY }}/${{ inputs.service }}:${{ inputs.image_tag }} -n ${{ inputs.namespace }} || echo "Failed to update image, deployment may not exist"
          
          # Rollout restart
          kubectl rollout restart deployment/${{ inputs.service }} -n ${{ inputs.namespace }} || echo "Failed to restart deployment"
          
          # Wait for rollout
          kubectl rollout status deployment/${{ inputs.service }} -n ${{ inputs.namespace }} --timeout=300s
          
          echo "‚úÖ Service ${{ inputs.service }} deployed successfully"

      - name: Verify Deployment
        run: |
          echo "üîç Verifying deployment for ${{ inputs.service }}"
          
          # Check deployment status
          kubectl get deployment ${{ inputs.service }} -n ${{ inputs.namespace }}
          
          # Check pods
          kubectl get pods -l app=${{ inputs.service }} -n ${{ inputs.namespace }}
          
          # Check service
          kubectl get service ${{ inputs.service }} -n ${{ inputs.namespace }} || echo "Service not found"
          
          echo "‚úÖ Deployment verification completed"
