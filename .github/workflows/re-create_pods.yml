name: Helm Apply and Upgrade Environment

on:
  workflow_dispatch:
    inputs:
      environment:
        type: string
        description: Environment name
        required: true
      namespace:
        description: Kubernetes namespace to deploy into
        required: true
        default: znode
      tenant:
        description: Tenant name
        required: true
        default: z10


jobs:
  restart_deployments:
    name: Restart Selected Deployments
    runs-on: [self-hosted, 100.195]
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout Teams Repo with Submodules
        uses: actions/checkout@v4
        with:
          ref: master
          submodules: recursive
          token: ${{ secrets.ACCESS_REPO }}

      - name: Update submodule to latest master
        run: git submodule update --remote --checkout --recursive

      - name: Kubernetes Set up
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Create Helm Secrets
        run: |
          kubectl create secret generic znode10x-secrets \
            --type=Opaque \
            --namespace ${{ inputs.namespace }} \
            --from-literal=DB_WBST="${{ secrets.DB_WBST }}" \
            --from-literal=DB_PYMT="${{ secrets.DB_PYMT }}" \
            --from-literal=DB_HGFR="${{ secrets.DB_HGFR }}" \
            --from-literal=DB_RCEG="${{ secrets.DB_RCEG }}" \
            --from-literal=STORAGE_CONN="${{ secrets.STORAGE_CONN }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.2

      - name: Helm install znode10 chart
        working-directory: ./znode10-helm/znode-templates/helm-aks/znode10-helm
        run: |
          echo "Deploying to environment: ${{ inputs.tenant }}${{ inputs.environment }}"
          echo '${{ vars.IMAGE_TAGS }}' > image_tags.json
          set_args=""
          for service in $(jq -r 'keys[]' image_tags.json); do
            tag=$(jq -r --arg svc "$service" '.[$svc]' image_tags.json)
            if [[ -n "$tag" && "$tag" != "null" ]]; then
              echo "✅ Using provided tag for $service: $tag"
            else
              current_image=$(kubectl get deployment $service -n ${{ inputs.namespace }} -o jsonpath='{.spec.template.spec.containers[0].image}' || true)
              if [[ -n "$current_image" ]]; then
                current_tag=$(echo "$current_image" | awk -F':' '{print $2}')
                tag="$current_tag"
              else
                echo "❌ ERROR: Deployment for $service not found. Cannot continue."
                exit 1
              fi
            fi
            set_args="$set_args --set-string resources.$service.image.tag=$tag"
          done

          helm upgrade --install znode10x . \
            --namespace ${{ inputs.namespace }} \
            -f default-values.yml \
            -f internal-values.yml \
            -f ../../../../znode10-helm/${{ inputs.environment }}-values.yml \
            -f ingress-values.yml \
            -f ${{ vars.CATEGORY }}-values.yml \
            --set global.tenant=${{ inputs.tenant }} \
            --set global.environment=${{ inputs.environment }} \
            --set global.domain=${{ vars.URL }} \
            --set global.webstoreURL=${{ vars.WEBSTORE_URL }} \
            --set global.imageRegistry=${{ vars.ACR_SERVER }} \
            --set global.imagePullSecrets=${{ vars.BLACKBOX }} \
            --set global.tenantacr.imageRegistry=${{ vars.TENANT_ACR_SERVER }} \
            --set global.clusterType=${{ vars.CLUSTER_TYPE }} \
            --set global.ingressClassName=nginx \
            --set-string global.db.wbst_db='${{ secrets.DB_WBST }}' \
            --set-string global.db.pymt_db='${{ secrets.DB_PYMT }}' \
            --set-string global.db.hgfr_db='${{ secrets.DB_HGFR }}' \
            --set-string global.db.rceg_db='${{ secrets.DB_RCEG }}' \
            --set-string storage.name="${{ secrets.STORAGE_NAME }}" \
            --set-string storage.url="https://${{ secrets.STORAGE_NAME }}.blob.core.windows.net" \
            --set-string storage.connection_string="${{ secrets.STORAGE_CONN }}" \
            --set-string global.newrelic.licensekey="${{ vars.NEWRELIC_KEY }}" \
            --set-string global.key.domainkey="${{ vars.DOMAIN_KEY }}" \
            $set_args
