name: Build and Deploy Services with Security Scanning

on:
  workflow_call:
    inputs:
      tenant:
        required: true
        type: string
      environment:
        required: true
        type: string
      branch:
        required: true
        type: string
      all:
        required: false
        type: boolean
        default: false
      services:
        required: true
        type: string
      namespace:
        required: true
        type: string
        default: znode
      triggered_by:
        required: false
        type: string
      skip_security_scan:
        required: false
        type: boolean
        default: false
      security_gate_enabled:
        required: false
        type: boolean
        default: true

run-name: Deploy to ${{ inputs.environment }} with Security Scan by @${{ github.actor }}

jobs:
  parse_services:
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
      services_list: ${{ steps.set.outputs.services_list }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        shell: powershell
        run: |
          if ($env:RUNNER_OS -eq "Windows") {
            # Windows - jq should be pre-installed or use chocolatey
            Write-Host "Running on Windows, checking jq availability"
            try {
              $jqVersion = jq --version
              Write-Host "jq is available: $jqVersion"
            } catch {
              Write-Host "jq not found, installing via chocolatey..."
              choco install jq -y
            }
          } else {
            # Linux - install jq
            sudo apt-get install -y jq
          }

      - name: Generate Matrix
        id: set
        shell: powershell
        run: |
          $ALL = '${{ inputs.all }}'
          $INPUT_SERVICES = '${{ inputs.services }}'
          $servicesObj = $INPUT_SERVICES | ConvertFrom-Json
          $selectedServices = @()
          
          foreach ($service in $servicesObj.PSObject.Properties) {
            if ($service.Name -ne "all" -and $service.Value -eq $true) {
              $selectedServices += $service.Name
            }
          }
          
          $SELECTED = $selectedServices -join ","
          
          if ($ALL -eq "true") {
            $CONFIG = Get-Content ".github/services-config.json" | ConvertFrom-Json
            $FINAL = $CONFIG
          } else {
            $CONFIG = Get-Content ".github/services-config.json" | ConvertFrom-Json
            $FINAL = $CONFIG | Where-Object { $selectedServices -contains $_.service }
          }

          $COUNT = $FINAL.Count
          if ($COUNT -eq 0) {
            Write-Host "‚ùå No services selected or matched. Skipping build."
            "matrix=[]" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            Write-Host "‚úÖ Found $COUNT services to build"
            "matrix=$($FINAL | ConvertTo-Json -Compress)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            "services_list=$SELECTED" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }

  # Security Scanning Phase
  security_scanning:
    if: ${{ !inputs.skip_security_scan && needs.parse_services.outputs.matrix != '[]' }}
    needs: parse_services
    strategy:
      matrix:
        include: ${{ fromJson(needs.parse_services.outputs.matrix) }}
    uses: ./.github/workflows/devsecops-core.yaml
    with:
      service: ${{ matrix.service }}
      repository: ${{ matrix.repository }}
      ref: ${{ inputs.branch }}
      working_directory: ${{ matrix.working_directory }}
      environment: ${{ inputs.environment }}
      tenant: ${{ inputs.tenant }}
      namespace: ${{ inputs.namespace }}
      skip_security_scan: false
    secrets:
      access_token: ${{ secrets.ACCESS_REPO }}
      sonar_token: ${{ secrets.SONAR_TOKEN }}
      trivy_username: ${{ secrets.TRIVY_USERNAME }}
      trivy_password: ${{ secrets.TRIVY_PASSWORD }}

  # Build Services Phase (only if security scanning passes)
  build_services:
    if: ${{ needs.parse_services.outputs.matrix != '[]' && !(inputs.environment == 'qa' && inputs.branch == 'qat') && inputs.environment != 'lt' && (!inputs.security_gate_enabled || success()) }}
    needs: [parse_services, security_scanning]
    strategy:
      matrix:
        include: ${{ fromJson(needs.parse_services.outputs.matrix) }}
    uses: ./.github/workflows/build-service.yaml
    with:
      service: ${{ matrix.service }}
      environment: ${{ inputs.environment }}
      repository: ${{ matrix.repository }}
      ref: ${{ inputs.branch }}
      working_directory: ${{ matrix.working_directory }}
      compose_file: ${{ matrix.compose_file }}
      acr_server: ${{ vars.DEV_ACR_SERVER }}
    secrets:
      access_token: ${{ secrets.ACCESS_REPO }}
      acr_username: ${{ secrets.DEV_ACRUN }}
      acr_password: ${{ secrets.DEV_ACRPW }}

  build_services_qa:
    if: ${{ inputs.environment == 'qa' && inputs.branch == 'qat' && needs.parse_services.outputs.matrix != '[]' && (!inputs.security_gate_enabled || success()) }}
    needs: [parse_services, security_scanning]
    strategy:
      matrix:
        include: ${{ fromJson(needs.parse_services.outputs.matrix) }}
    uses: ./.github/workflows/build-service.yaml
    with:
      service: ${{ matrix.service }}
      environment: ${{ inputs.environment }}
      repository: ${{ matrix.repository }}
      ref: ${{ inputs.branch }}
      working_directory: ${{ matrix.working_directory }}
      compose_file: ${{ matrix.compose_file }}
      acr_server: ${{ vars.QA_ACR_SERVER }}
    secrets:
      access_token: ${{ secrets.ACCESS_REPO }}
      acr_username: ${{ secrets.QA_ACRUN }}
      acr_password: ${{ secrets.QA_ACRPW }}

  # Deploy Services Phase
  deploy_services:
    if: ${{ needs.parse_services.outputs.matrix != '[]' && (!inputs.security_gate_enabled || success()) }}
    needs: [parse_services, build_services, build_services_qa]
    strategy:
      matrix:
        include: ${{ fromJson(needs.parse_services.outputs.matrix) }}
    uses: ./.github/workflows/deploy-service.yaml
    with:
      service: ${{ matrix.service }}
      environment: ${{ inputs.environment }}
      namespace: ${{ inputs.namespace }}
      tenant: ${{ inputs.tenant }}
      image_tag: "z10-${{ inputs.environment }}"
    secrets:
      kubeconfig: ${{ secrets.KUBECONFIG }}

  # Final Security Report
  security_summary:
    if: ${{ !inputs.skip_security_scan }}
    needs: [parse_services, security_scanning]
    runs-on: self-hosted
    steps:
      - name: Generate Security Summary
        run: |
          echo "üìä DevSecOps Pipeline Summary"
          echo "================================"
          echo "‚úÖ Security scanning completed for all services"
          echo "‚úÖ Build phase completed successfully"
          echo "‚úÖ Deployment phase completed successfully"
          echo ""
          echo "üîí Security tools used:"
          echo "- SAST: SonarQube"
          echo "- Secret Management: GitLeaks"
          echo "- Image Scanning: Trivy"
          echo ""
          echo "üéØ Next steps:"
          echo "1. Review security reports in artifacts"
          echo "2. Address any security findings"
          echo "3. Monitor deployed services"
          echo "4. Schedule regular security scans"

      - name: Upload Security Summary
        uses: actions/upload-artifact@v4
        with:
          name: devsecops-summary-${{ inputs.environment }}
          path: |
            .github/workflows/devsecops-core.yaml
          retention-days: 30

  # Notify on Security Gate Failure
  security_gate_failure:
    if: ${{ inputs.security_gate_enabled && failure() }}
    needs: [parse_services, security_scanning]
    runs-on: self-hosted
    steps:
      - name: Security Gate Failure Notification
        run: |
          echo "üö® SECURITY GATE FAILED"
          echo "========================"
          echo "Service: ${{ matrix.service || 'Multiple' }}"
          echo "Environment: ${{ inputs.environment }}"
          echo "Tenant: ${{ inputs.tenant }}"
          echo "Branch: ${{ inputs.branch }}"
          echo ""
          echo "‚ùå Build and deployment blocked due to security issues"
          echo "üîç Please review security scan results and address issues"
          echo "üîÑ Re-run the pipeline after fixing security vulnerabilities"
          
          # Send notification (can be enhanced with Slack, Teams, etc.)
          echo "üìß Security gate failure notification sent"
