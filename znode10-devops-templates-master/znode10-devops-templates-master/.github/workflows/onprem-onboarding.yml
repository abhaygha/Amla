name: Znode10 Onboarding on Local Cluster

on:
  workflow_dispatch:
    inputs:
      tenant:
        description: 'Client/Product Name'
        required: true
        default: 'z10'
      environment:
        description: 'Environment'
        required: true
        default: 'dev1'
      namespace:
        description: 'Namespace'
        required: true
        default: 'znode'
      ingressip:
        description: 'Static Ingress IP'
        required: false


jobs:
  deploy:
    name: Deploy Znode10x Helm Chart
    runs-on: [self-hosted, ubuntu-100.188]
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        ref: master

    - name: Kubernetes Set up
      uses: azure/k8s-set-context@v1
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        version: '1.19.9'

    - name: Kubernetes Set up
      uses: azure/k8s-set-context@v1
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        version: '1.19.9'

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.13.2

    - name: Helm Dependency Update (if needed)
      run: |
        cd ./znode10-helm
        ls -ltr
        pwd

    - name: Create namespace if not exists
      run: |
        ns="${{ github.event.inputs.namespace }}"
        if kubectl get ns "$ns" >/dev/null 2>&1; then
          echo "namespace '$ns' already exists."
        else
          echo "Creating namespace '$ns'..."
          kubectl create ns "$ns"
        fi

    - name: Add Bitnami Helm Repository for Redis
      working-directory: ./znode10-helm/redis
      run: helm repo add bitnami https://charts.bitnami.com/bitnami

    - name: Install or Upgrade Redis webstore using Helm
      working-directory: ./znode10-helm/redis
      run: |
        helm repo update
        helm upgrade --install rediswebstore bitnami/redis \
          -f redis-helm-webstore.yml -n ${{ github.event.inputs.namespace}}

    - name: Install or Upgrade Redis api using Helm
      working-directory: ./znode10-helm/redis
      run: |
        helm repo update
        helm upgrade --install redisapi bitnami/redis \
          -f redis-helm-api.yml -n ${{ github.event.inputs.namespace}}

    - name: Run Redis Client Pod for Rediswebstore in Background
      working-directory: ./znode10-helm
      run: |
        kubectl run --namespace ${{ github.event.inputs.namespace }} rediswebstore-client --restart='Never' \
          --image docker.io/bitnami/redis:7.4.0-debian-12-r2 --command -- sleep infinity

    - name: Run Redis Client Pod for Redisapi in Background
      working-directory: ./znode10-helm
      run: |
        kubectl run --namespace ${{ github.event.inputs.namespace }} redisapi-client --restart='Never' \
          --image docker.io/bitnami/redis:7.4.0-debian-12-r2 --command -- sleep infinity

    - name: Install Mongo ES Rabit
      working-directory: ./znode10-helm
      run: |
        kubectl apply -f databases -n ${{ github.event.inputs.namespace}}

    - name: Create Required Secrets
      working-directory: ./znode10-helm/ssl
      run: |
        openssl pkcs12 -in amla.io.pfx -clcerts -nokeys -out tls.crt -passin pass:${{ secrets.PFXSECRET }}
        openssl pkcs12 -in amla.io.pfx -nocerts -nodes -out tls.key -passin pass:${{ secrets.PFXSECRET }}
        kubectl create secret tls webstore-tls-secret --cert=tls.crt --key=tls.key -n ${{ github.event.inputs.namespace}}
        kubectl create secret tls api-tls-secret --cert=amla.io.crt --key=amla.io.key -n ${{ github.event.inputs.namespace}}
        kubectl create secret docker-registry nonprodacrsecret --namespace ${{ github.event.inputs.namespace }} --docker-server=${{ secrets.NONPROD_ACR_SERVER }} --docker-username=${{ secrets.NONPROD_ACR_NAME }} --docker-password=${{ secrets.NONPROD_ACR_PW }}
        kubectl create secret generic znode10storage --from-literal azurestorageaccountname=${{ secrets.DEV_STORAGE_NAME }} --from-literal azurestorageaccountkey=${{ secrets.DEV_STORAGE_KEY }} --type=Opaque -n ${{ github.event.inputs.namespace}}

    - name: Install LB
      working-directory: ./znode10-helm/templates/
      run: 
        |
        kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.10/config/manifests/metallb-native.yaml


    - name: Kubernetes Set up
      uses: azure/k8s-set-context@v1
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        version: '1.19.9'

    - name: Install Ingress-Nginx using Helm
      working-directory: ./znode10-helm/ingress-nginx
      run: |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update
        helm upgrade --install ${{ github.event.inputs.tenant }}${{ github.event.inputs.environment }} ingress-nginx/ingress-nginx \
          --namespace ${{ github.event.inputs.namespace }} \
          --set controller.ingressClassResource.name=${{ github.event.inputs.tenant }}${{ github.event.inputs.environment }} \
          --set controller.ingressClassName=${{ github.event.inputs.tenant }}${{ github.event.inputs.environment }} \
          --set controller.kind=DaemonSet \
          --set controller.hostNetwork=true \
          --set controller.daemonset.useHostPort=true \
          --set controller.service.type=ClusterIP \
          --set controller.admissionWebhooks.enabled=false

    - name: Helm Install or Upgrade
      working-directory: ./znode10-helm
      run: |
        echo "Waiting 60 seconds to ensure ingress controller is ready..."
        sleep 60
        helm upgrade --install znode10x . \
          -f default-values.yml \
          -f values.yml \
          -f ${{ github.event.inputs.environment }}-values.yml \
          -f ingress-values.yml \
          --set global.tenant=${{ github.event.inputs.tenant }} \
          --set global.environment=${{ github.event.inputs.environment }} \
          --set global.domain=amla.io \
          --set global.ingressClassName=${{ github.event.inputs.tenant }}${{ github.event.inputs.environment }} \
          --namespace ${{ github.event.inputs.namespace }} \
          --force

      # kubectl rollout restart deployment -n ${{ github.event.inputs.namespace}}

    - name: Apply ingress and restart
      working-directory: ./znode10-helm/ingress-nginx
      run: |
        kubectl rollout restart daemonset ${{ github.event.inputs.tenant }}${{ github.event.inputs.environment }}-ingress-nginx-controller -n ${{ github.event.inputs.namespace}}
