name: Update SSL Certificate Across All AKS Environments

on:
  workflow_dispatch:
    inputs:
      tenant:
        description: 'Tenant Name (z10, etna)'
        required: true
        default: 'z10'
      environments:
        description: 'Environments to update (comma-separated, e.g., dev-aks,prod-aks)'
        required: false
        default: 'all' # Default to all environments
      namespace:
        description: 'The Kubernetes namespace'
        required: true
      new_domain:
        description: 'The new domain name (e.g., znodecorp.com)'
        required: true
      akstype:
        description: 'The type of AKS (e.g., internal, tenant)'
        required: true
        type: choice
        options:
          - internal
          - tenant

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Install JQ
        run: sudo apt-get update && sudo apt-get install -y jq
      
      - id: set-matrix
        run: |
          # Trim whitespace from the environments input
          ENVIRONMENTS=$(echo "${{ github.event.inputs.environments }}" | xargs)
          
          if [[ "$ENVIRONMENTS" == "all" ]]; then
            MATRIX_JSON='["dev-onprem", "staging-onprem", "prod-onprem", "dev-aks", "staging-aks", "prod-aks", "dev1", "dev2", "dev3", "dev4", "dev5", "dev6", "dev7", "dev8", "dev9", "int", "qa"]'
          else
            MATRIX_JSON=$(echo "$ENVIRONMENTS" | tr ',' '\n' | jq -R . | jq -sc .)
          fi
          
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "Generated Matrix = $MATRIX_JSON"

  update-all-environments:
    needs: generate-matrix
    # Use the static runner labels for the self-hosted runner
    runs-on: ubuntu-latest
    
    # Define a matrix to loop through all your environments
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
    environment: ${{ inputs.tenant }}${{ matrix.environment }}

    steps:
      - name: Checkout Template Repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-devops-templates
          token: ${{ secrets.ACCESS_REPO }}
          ref: master

      - name: Install and Authenticate GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh
          gh --version
          echo ${{ secrets.ACCESS_REPO }} | gh auth login --with-token
          
      - name: Update GitHub Environment Variables
        env:
          REPO: ${{ github.repository }}
          NEW_DOMAIN: ${{ github.event.inputs.new_domain }}
          ENV_NAME: ${{ inputs.tenant }}${{ matrix.environment }}
        run: |
          echo "Updating variables for environment: $ENV_NAME"
          
          gh variable set DOMAIN --env "$ENV_NAME" --body "$NEW_DOMAIN" --repo "$REPO"
          gh variable set URL --env "$ENV_NAME" --body "-${{ inputs.tenant }}-${ENV_NAME}.${NEW_DOMAIN}" --repo "$REPO"
          gh variable set WEBSTORE_URL --env "$ENV_NAME" --body "webstore-${{ inputs.tenant }}-${ENV_NAME}.${NEW_DOMAIN}" --repo "$REPO"
          
      - name: Set Kubernetes Context
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.2

      - name: Create Required Secrets
        working-directory: ./helm-aks/znode10-helm/ssl/${{ vars.DOMAIN }}
        run: |
          echo "Deleting old TLS secret 'api-tls-secret'..."
          kubectl delete secret api-tls-secret --namespace ${{ github.event.inputs.namespace}} --ignore-not-found
          
          echo "Creating new TLS secret 'api-tls-secret'..."
          kubectl create secret tls api-tls-secret \
            --cert=${{ vars.DOMAIN }}.crt \
            --key=${{ vars.DOMAIN }}.key \
            --namespace ${{ github.event.inputs.namespace}}
      
      - name: Checkout Template Repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-devops-templates
          token: ${{ secrets.ACCESS_REPO }}
          ref: master

      - name: Kubernetes Set up
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.2

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq          

      - name: Helm install znode10 chart
        if: ${{ github.event.inputs.akstype == 'internal' }}
        working-directory: ./helm-aks/znode10-helm
        run: |
          echo "Deploying to environment: ${{ inputs.tenant }}${{ matrix.environment }}"
          echo '${{ vars.IMAGE_TAGS }}' > image_tags.json
          set_args=""
          for service in $(jq -r 'keys[]' image_tags.json); do
            tag=$(jq -r --arg svc "$service" '.[$svc]' image_tags.json)
            if [[ -n "$tag" && "$tag" != "null" ]]; then
              echo "✅ Using provided tag for $service: $tag"
            else
              current_image=$(kubectl get deployment $service -n ${{ inputs.namespace }} -o jsonpath='{.spec.template.spec.containers[0].image}' || true)
              if [[ -n "$current_image" ]]; then
                current_tag=$(echo "$current_image" | awk -F':' '{print $2}')
                tag="$current_tag"
              else
                echo "❌ ERROR: Deployment for $service not found. Cannot continue."
                exit 1
              fi
            fi
            set_args="$set_args --set-string resources.$service.image.tag=$tag"
          done

          helm upgrade --install znode10x . \
            --namespace ${{ inputs.namespace }} \
            -f default-values.yml \
            -f internal-values.yml \
            -f ${{ github.event.inputs.tenant }}-${{ github.event.matrix.environment }}-values.yml \
            -f ingress-values.yml \
            -f ${{ vars.CATEGORY }}-values.yml \
            --set global.tenant=${{ inputs.tenant }} \
            --set global.environment=${{ matrix.environment }} \
            --set global.domain=${{ vars.URL }} \
            --set global.webstoreURL=${{ vars.WEBSTORE_URL }} \
            --set global.imageRegistry=${{ vars.ACR_SERVER }} \
            --set global.imagePullSecrets=${{ vars.BLACKBOX }} \
            --set global.tenantacr.imageRegistry=${{ vars.TENANT_ACR_SERVER }} \
            --set global.clusterType=${{ vars.CLUSTER_TYPE }} \
            --set global.ingressClassName=${{ github.event.inputs.tenant }}${{ github.event.matrix.environment }} \
            --set-string global.db.wbst_db='${{ secrets.DB_WBST }}' \
            --set-string global.db.pymt_db='${{ secrets.DB_PYMT }}' \
            --set-string global.db.hgfr_db='${{ secrets.DB_HGFR }}' \
            --set-string global.db.rceg_db='${{ secrets.DB_RCEG }}' \
            --set-string storage.name="${{ secrets.STORAGE_NAME }}" \
            --set-string storage.url="https://${{ secrets.STORAGE_NAME }}.blob.core.windows.net" \
            --set-string storage.connection_string="${{ secrets.STORAGE_CONN }}" \
            --set-string global.newrelic.licensekey="${{ secrets.NEWRELIC_KEY }}" \
            --set-string global.key.domainkey="${{ vars.DOMAIN_KEY }}" \
            $set_args
      
      - name: Helm install znode10 chart
        if: ${{ github.event.inputs.akstype == 'tenant' }}
        working-directory: ./helm-aks/znode10-helm
        run: |
          echo "Deploying to environment: ${{ inputs.tenant }}${{ matrix.environment }}"
          echo '${{ vars.IMAGE_TAGS }}' > image_tags.json
          set_args=""
          for service in $(jq -r 'keys[]' image_tags.json); do
            tag=$(jq -r --arg svc "$service" '.[$svc]' image_tags.json)
            if [[ -n "$tag" && "$tag" != "null" ]]; then
              echo "✅ Using provided tag for $service: $tag"
            else
              current_image=$(kubectl get deployment $service -n ${{ inputs.namespace }} -o jsonpath='{.spec.template.spec.containers[0].image}' || true)
              if [[ -n "$current_image" ]]; then
                current_tag=$(echo "$current_image" | awk -F':' '{print $2}')
                tag="$current_tag"
              else
                echo "❌ ERROR: Deployment for $service not found. Cannot continue."
                exit 1
              fi
            fi
            set_args="$set_args --set-string resources.$service.image.tag=$tag"
          done

          helm upgrade --install znode10x . \
            --namespace ${{ inputs.namespace }} \
            -f default-values.yml \
            -f values.yml \
            -f ${{ github.event.inputs.tenant }}-${{ github.event.matrix.environment }}-values.yml \
            -f ingress-values.yml \
            -f ${{ vars.CATEGORY }}-values.yml \
            --set global.tenant=${{ inputs.tenant }} \
            --set global.environment=${{ matrix.environment }} \
            --set global.domain=${{ vars.URL }} \
            --set global.webstoreURL=${{ vars.WEBSTORE_URL }} \
            --set global.imageRegistry=${{ vars.ACR_SERVER }} \
            --set global.imagePullSecrets=${{ vars.BLACKBOX }} \
            --set global.tenantacr.imageRegistry=${{ vars.TENANT_ACR_SERVER }} \
            --set global.clusterType=${{ vars.CLUSTER_TYPE }} \
            --set global.ingressClassName=${{ github.event.inputs.tenant }}${{ github.event.matrix.environment }} \
            --set-string global.db.wbst_db='${{ secrets.DB_WBST }}' \
            --set-string global.db.pymt_db='${{ secrets.DB_PYMT }}' \
            --set-string global.db.hgfr_db='${{ secrets.DB_HGFR }}' \
            --set-string global.db.rceg_db='${{ secrets.DB_RCEG }}' \
            --set-string storage.name="${{ secrets.STORAGE_NAME }}" \
            --set-string storage.url="https://${{ secrets.STORAGE_NAME }}.blob.core.windows.net" \
            --set-string storage.connection_string="${{ secrets.STORAGE_CONN }}" \
            --set-string global.newrelic.licensekey="${{ secrets.NEWRELIC_KEY }}" \
            --set-string global.key.domainkey="${{ vars.DOMAIN_KEY }}" \
            $set_args

      # - name: Apply ingress and restart
      #   run: |
      #     echo "Waiting 90 seconds to ensure ingress controller is ready..."
      #     sleep 90
      #     kubectl rollout restart daemonset nginx-ingress-nginx-controller -n ${{ github.event.inputs.namespace}
