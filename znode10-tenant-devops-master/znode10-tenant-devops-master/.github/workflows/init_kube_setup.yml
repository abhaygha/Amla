name: Initial Kubernetes Setup

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Enter the tenant env name
        required: true
        options:
        - uat 
        - sandbox
        - trng
        - growdev
        - knoxqa
        - etnaqa
        - klrtnp
        - etnapr
        - knoxpr
        - fwksnp
        - demostage

      deployon:
        type: choice
        description: Deployment on
        options:
        - tenants/uat
        - tenants/etna/dev
        - tenants/usds
        - tenant/trng
        - tenants/knox/dev
        - tenants/grow/dev
        - tenants/knox/qa
        - tenants/etna/qa
        - tenants/klrt/np
        - tenants/etna/pr
        - tenants/knox/pr
        - tenants/fwks/np
        - tenants/demostore/np

      ingressprivateip:
        type: string
        description: Enter the Ingress Private IP for LoadBalancer 

jobs:
  initiate_aks_setup:
    name: kubernetes cluster setup
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: checkout code
        uses: actions/checkout@v2
        with: 
            ref: master

      - name: kubernetes login
        uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.KUBECONFIG}}
          version: '1.19.9'
        
      - name: create namespace
        run: kubectl create namespace znode
                
      - name: create secret docker-registry
        run: |
           kubectl create secret docker-registry znodeprodacrsecret --namespace znode --docker-server=${{ secrets.ACR_SERVER }} --docker-username=${{ secrets.ACRUN }} --docker-password=${{ secrets.ACRPW }}
           kubectl create secret docker-registry tenantacrsecret --namespace znode --docker-server=${{ secrets.TENANT_ACR_SERVER }} --docker-username=${{ secrets.TENANT_ACRUN }} --docker-password=${{ secrets.TENANT_ACRPW }}
      
      - name: create secret storage
        run:  kubectl create secret generic znode10storage --from-literal azurestorageaccountname=${{ secrets.STORAGEUN }} --from-literal azurestorageaccountkey=${{ secrets.STORAGEPW }} --type=Opaque -n znode

      - name: amla-pfx-secret
        working-directory: ssl_2024_25
        run: kubectl create secret generic amla-pfx-secret --from-file=amla.io.pfx --from-literal=password=${{ secrets.PFXSECRET }} -n znode

      - name: amla-ssl-secret    
        working-directory: ssl_2024_25     
        run:  kubectl create secret generic amla-ssl-secret --from-file=amla.io.crt --from-file=amla.io.key -n znode

      - name: amla-tls-secret 
        working-directory: ssl_2024_25
        run:  kubectl create secret tls amla-tls-secret --cert=amla.io.crt --key=amla.io.key -n znode
        
      - name: Install Helm if Not Already Installed
        run: |
          if ! command -v helm &> /dev/null
          then
            echo "Helm not found, installing..."
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          else
            echo "Helm is already installed"
          fi

      - name: Add Bitnami Helm Repository
        working-directory: ${{ inputs.deployon }}
        run: helm repo add bitnami https://charts.bitnami.com/bitnami

      - name: Install or Upgrade Rediswebstore using Helm
        working-directory: ${{ inputs.deployon }}/deploy/helm
        run: |
          helm repo update
          helm upgrade --install rediswebstore bitnami/redis \
            -f redis-helm-webstore.yml -n znode

      - name: Install or Upgrade Redisapi using Helm
        working-directory: ${{ inputs.deployon }}/deploy/helm
        run: |
          helm repo update
          helm upgrade --install redisapi bitnami/redis \
            -f redis-helm-api.yml -n znode

      - name: Run Redis Client Pod for Rediswebstore in Background
        working-directory: ${{ inputs.deployon }}/deploy/helm
        run: |
          kubectl run --namespace znode rediswebstore-client --restart='Never' \
            --image docker.io/bitnami/redis:7.4.0-debian-12-r2 --command -- sleep infinity

      - name: Run Redis Client Pod for Redisapi in Background
        working-directory: ${{ inputs.deployon }}/deploy/helm
        run: |
          kubectl run --namespace znode redisapi-client --restart='Never' \
            --image docker.io/bitnami/redis:7.4.0-debian-12-r2 --command -- sleep infinity

      # - name: Install Ingress-Nginx using Helm
      #   working-directory: ${{ inputs.deployon }}/ingress-nginx
      #   run: |
      #     helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      #     helm repo update
      #     helm install  nginx-ingress ingress-nginx/ingress-nginx \
      #       --namespace znode\
      #       --set controller.service.externalTrafficPolicy=Local \
      #       --set controller.service.type=LoadBalancer \
      #       --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-internal"="true" \
      #       --set controller.service.loadBalancerIP=${{ inputs.ingressprivateip }}

      - name: create pvc
        working-directory: ${{ inputs.deployon }}
        run: kubectl apply -f pvc -n znode
          
      - name: create service
        working-directory: ${{ inputs.deployon }}
        run: kubectl apply -f service -n znode
          
      - name: create app
        working-directory: ${{ inputs.deployon }}
        run: kubectl apply -f service/app -n znode
        
      - name: create scaler 
        working-directory: ${{ inputs.deployon }}
        run: kubectl apply -f deploy/app/scaler -n znode

      - name: create pdb 
        working-directory: ${{ inputs.deployon }}
        run: kubectl apply -f pdb/pdb.yml -n znode
 
  setup_terraform:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: initiate_aks_setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
        shell: bash

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6
      - name: Verify Terraform Installation
        run: terraform --version

      - name: Terraform Init and Apply
        working-directory: ${{ inputs.deployon }}/terraform/
        run: |
          terraform init
          terraform apply -auto-approve
          
      - name: create dependent pods
        working-directory: ${{ inputs.deployon }}
        run: kubectl apply -f deploy -n znode

      - name: create znode pods
        working-directory: ${{ inputs.deployon }}
        run: |
          kubectl apply -f deploy/app/pods -n znode
          kubectl apply -f deploy/app/custom -n znode

      # - name: Apply Ingress
      #   working-directory: ${{ inputs.deployon }}/ingress-nginx
      #   run: |
      #     kubectl apply -f ingress-nginx.yaml -n znode
      #     kubectl rollout restart deployment nginx-ingress-ingress-nginx-controller -n znode
