name: Z10-Build and Deploy sandbox Databases

on:
 workflow_dispatch:
    inputs:
        environment:
          description: 'The Environment to deploy on'
          required: true
          type: string
          default: sandbox

        branch:
          description: 'The branch to deploy from'
          required: true
          type: string
          default: dev

        multifront_db:
          description: 'Build Multifront DB'
          required: true
          default: false
          type: boolean


        hangfire_db:
          description: 'Build Hangfire DB'
          required: true
          default: false
          type: boolean
  
        recommendation_db:
          description: 'Build Recommendation DB'
          required: true
          default: false
          type: boolean

        payment_manager_db:
          description: 'Build Pymt Mngr DB'
          required: true
          default: false
          type: boolean

        sandbox_run_number:
          description: 'sandbox Build Run Number'
          required: false
          type: string      

jobs:
  build_deploy_multifront_db:

    runs-on: windows-2019
    environment: ${{ github.event.inputs.environment }}
    if: github.event.inputs.multifront_db == 'true'

    steps:

     - name: checkout multifront db repo
       uses: actions/checkout@v4
       with: 
         repository: MRRSoft/znode10-multifront-db
         token: ${{ secrets.ACCESS_REPO }}
         ref: ${{ github.event.inputs.branch }}
         path: ${{ github.workspace }}\znode10-multifront-db

     - name: create dacpac
       run: |
           & 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\msbuild.exe' /p:DeployOnBuild=true /p:TransformConfigFiles=true /p:WarningLevel=0  ${{ github.workspace }}/znode10-multifront-db/Znode_Multifront/Znode_Multifront_Database.sln /t:Clean,Build
           dir ${{ github.workspace }}\znode10-multifront-db\Znode_Multifront\Znode_Multifront_Database\bin\Debug\

     - uses: azure/login@v1
       with:
         creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}
   
    #  - name: Backup of DACPAC to Azure File Share
    #    if: inputs.branch == 'master'
    #    run: |
    #      az storage file copy start --source-path Znode_Multifront_Database.dacpac --source-share multifront-dacpac --destination-path Znode_Multifront_Database.dacpac --destination-share multifront-dacpac-backup --account-name ${{ secrets.MASTER_STORAGE_ACCOUNT_NAME }} --account-key ${{ secrets.MASTER_STORAGE_ACCOUNT_KEY }}

     - name: Upload Newly Created DACPAC to Azure File Share
       if: (inputs.branch == 'master' || contains(inputs.branch, 'hotfixes')) && inputs.environment == 'sandbox'
       run: |
         cd ${{ github.workspace }}\znode10-multifront-db\Znode_Multifront\Znode_Multifront_Database\bin\Debug\
         mv Znode_Multifront_Database.dacpac Znode_Multifront_Database_${{ inputs.sandbox_run_number }}.dacpac
         az storage file upload --source ${{ github.workspace }}\znode10-multifront-db\Znode_Multifront\Znode_Multifront_Database\bin\Debug\Znode_Multifront_Database_${{ inputs.sandbox_run_number }}.dacpac --path Znode_Multifront_Database_${{ inputs.sandbox_run_number }}.dacpac --share-name multifront-dacpac --account-name ${{ secrets.MASTER_STORAGE_ACCOUNT_NAME }} --account-key ${{ secrets.MASTER_STORAGE_ACCOUNT_KEY }}

     - name: Azure SQL Deploy
       uses: Azure/sql-action@v1
       with:
          server-name: ${{ secrets.DB_SERVER_NAME }} 
          connection-string: '${{ secrets.MULTIFRONT_DB_CONNECTION_STRING }}'
          dacpac-package: ${{ github.workspace }}\znode10-multifront-db\Znode_Multifront\Znode_Multifront_Database\bin\Debug\Znode_Multifront_Database_${{ inputs.sandbox_run_number }}.dacpac
          arguments: '/p:BlockOnPossibleDataLoss=false /p:DropObjectsNotInSource=false'


  ##########################################################################################

  build_deploy_hangfire_db:
    runs-on: windows-2019
    environment: ${{ github.event.inputs.environment }}
    if: github.event.inputs.hangfire_db == 'true'  

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        repository: MRRSoft/znode10-hangfire-db
        token: ${{ secrets.ACCESS_REPO }}
        ref: ${{ github.event.inputs.branch }}


    - name: create dacpac
      run: |
        & 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\msbuild.exe' /p:DeployOnBuild=true /p:TransformConfigFiles=true /p:WarningLevel=0  Znode_Multifront_Hangfire/Znode_Multifront_Hangfire_Database.sln /t:Clean,Build
        dir ${{ github.workspace }}\Znode_Multifront_Hangfire\Znode_Multifront_Hangfire_Database\bin\Debug\

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

    # - name: Backup of DACPAC to Azure File Share
    #   run: |
    #     az storage file copy start --source-path Znode_Multifront_Hangfire_Database.dacpac --source-share hangfire-dacpac --destination-path Znode_Multifront_Hangfire_Database.dacpac --destination-share hangfire-dacpac-backup --account-name ${{ secrets.MASTER_STORAGE_ACCOUNT_NAME }} --account-key ${{ secrets.MASTER_STORAGE_ACCOUNT_KEY }}

    - name: Upload DACPAC to Azure File Share
      if: (inputs.branch == 'master' || contains(inputs.branch, 'hotfixes')) && inputs.environment == 'sandbox'
      run: |
        cd ${{ github.workspace }}\Znode_Multifront_Hangfire\Znode_Multifront_Hangfire_Database\bin\Debug\
        mv Znode_Multifront_Hangfire_Database.dacpac Znode_Multifront_Hangfire_Database_${{ inputs.sandbox_run_number }}.dacpac
        az storage file upload --source ${{ github.workspace }}\Znode_Multifront_Hangfire\Znode_Multifront_Hangfire_Database\bin\Debug\Znode_Multifront_Hangfire_Database_${{ inputs.sandbox_run_number }}.dacpac --path Znode_Multifront_Hangfire_Database_${{ inputs.sandbox_run_number }}.dacpac --share-name hangfire-dacpac --account-name ${{ secrets.MASTER_STORAGE_ACCOUNT_NAME }} --account-key ${{ secrets.MASTER_STORAGE_ACCOUNT_KEY }}                

    - name: Azure SQL Deploy
      uses: Azure/sql-action@v1
      with:
        server-name: ${{ secrets.DB_SERVER_NAME }}
        connection-string: '${{ secrets.HANGFIRE_DB_CONNECTION_STRING }}'
        dacpac-package: ${{ github.workspace }}\Znode_Multifront_Hangfire\Znode_Multifront_Hangfire_Database\bin\Debug\Znode_Multifront_Hangfire_Database_${{ inputs.sandbox_run_number }}.dacpac
        arguments: '/p:BlockOnPossibleDataLoss=false /p:DropObjectsNotInSource=false'


##########################################################################################################################

  build_deploy_recommendation_db:
    runs-on: windows-2019
    environment: ${{ github.event.inputs.environment }}
    if: github.event.inputs.recommendation_db == 'true'  
    
    steps:

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        repository: MRRSoft/znode10-recommendation-engine-db
        token: ${{ secrets.ACCESS_REPO }}
        ref: ${{ github.event.inputs.branch }}
   
    - name: create dacpac
      run: |
          & 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\msbuild.exe' /p:DeployOnBuild=true /p:TransformConfigFiles=true /p:WarningLevel=0  Znode_Multifront_RecommendationEngine/Znode_Multifront_RecommendationEngine_Database.sln /t:Clean,Build
          dir ${{ github.workspace }}\Znode_Multifront_RecommendationEngine\Znode_Multifront_RecommendationEngine_Database\bin\Debug\

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}
  
    # - name: Backup of DACPAC to Azure File Share
    #   if: inputs.branch == 'master'
    #   run: |
    #     az storage file copy start --source-path Znode_Multifront_RecommendationEngine_Database.dacpac --source-share rceg-dacpac --destination-path Znode_Multifront_RecommendationEngine_Database.dacpac --destination-share rceg-dacpac-backup --account-name ${{ secrets.MASTER_STORAGE_ACCOUNT_NAME }} --account-key ${{ secrets.MASTER_STORAGE_ACCOUNT_KEY }}

    - name: Upload DACPAC to Azure File Share
      if: (inputs.branch == 'master' || contains(inputs.branch, 'hotfixes')) && inputs.environment == 'sandbox'
      run: |
        cd ${{ github.workspace }}\Znode_Multifront_RecommendationEngine\Znode_Multifront_RecommendationEngine_Database\bin\Debug\
        mv Znode_Multifront_RecommendationEngine_Database.dacpac Znode_Multifront_RecommendationEngine_Database_${{ inputs.sandbox_run_number }}.dacpac
        az storage file upload --source ${{ github.workspace }}\Znode_Multifront_RecommendationEngine\Znode_Multifront_RecommendationEngine_Database\bin\Debug\Znode_Multifront_RecommendationEngine_Database_${{ inputs.sandbox_run_number }}.dacpac --path Znode_Multifront_RecommendationEngine_Database_${{ inputs.sandbox_run_number }}.dacpac --share-name rceg-dacpac --account-name ${{ secrets.MASTER_STORAGE_ACCOUNT_NAME }} --account-key ${{ secrets.MASTER_STORAGE_ACCOUNT_KEY }}    

    - name: Azure SQL Deploy
      uses: Azure/sql-action@v1
      with:
        server-name: ${{ secrets.DB_SERVER_NAME }}
        connection-string: '${{ secrets.RCEG_DB_CONNECTION_STRING }}'
        dacpac-package: ${{ github.workspace }}\Znode_Multifront_RecommendationEngine\Znode_Multifront_RecommendationEngine_Database\bin\Debug\Znode_Multifront_RecommendationEngine_Database_${{ inputs.sandbox_run_number }}.dacpac
        arguments: '/p:BlockOnPossibleDataLoss=false /p:DropObjectsNotInSource=false'

##########################################################################################################################

  build_deploy_payment_manager_db:
    runs-on: windows-2019
    environment: ${{ github.event.inputs.environment }}
    if: github.event.inputs.payment_manager_db == 'true'  
    
    steps:

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        repository: MRRSoft/znode10-plugin-payment-db
        token: ${{ secrets.ACCESS_REPO }}
        ref: ${{ github.event.inputs.branch }}
  
    - name: create dacpac
      run: |
          & 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\msbuild.exe' /p:DeployOnBuild=true /p:TransformConfigFiles=true /p:WarningLevel=0  Znode_Multifront_Plugin_Payment/Znode_Multifront_Plugin_Payment_Database.sln /t:Clean,Build
          dir ${{ github.workspace }}\Znode_Multifront_Plugin_Payment\Znode_Multifront_Plugin_Payment\bin\Debug\Znode_Multifront_Plugin_Payment.dacpac

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

    # - name: Backup of DACPAC to Azure File Share
    #   if: inputs.branch == 'master'
    #   run: |
    #     az storage file copy start --source-path Znode_Multifront_Plugin_Payment.dacpac --source-share payment-dacpac --destination-path Znode_Multifront_Plugin_Payment.dacpac --destination-share payment-dacpac-backup --account-name ${{ secrets.MASTER_STORAGE_ACCOUNT_NAME }} --account-key ${{ secrets.MASTER_STORAGE_ACCOUNT_KEY }}

    - name: Upload DACPAC to Azure File Share
      if: (inputs.branch == 'master' || contains(inputs.branch, 'hotfixes')) && inputs.environment == 'sandbox'
      run: |
        cd ${{ github.workspace }}\Znode_Multifront_Plugin_Payment\Znode_Multifront_Plugin_Payment\bin\Debug\
        mv Znode_Multifront_Plugin_Payment.dacpac Znode_Multifront_Plugin_Payment_${{ inputs.sandbox_run_number }}.dacpac
        az storage file upload --source ${{ github.workspace }}\Znode_Multifront_Plugin_Payment\Znode_Multifront_Plugin_Payment\bin\Debug\Znode_Multifront_Plugin_Payment_${{ inputs.sandbox_run_number }}.dacpac --path Znode_Multifront_Plugin_Payment_${{ inputs.sandbox_run_number }}.dacpac --share-name payment-dacpac --account-name ${{ secrets.MASTER_STORAGE_ACCOUNT_NAME }} --account-key ${{ secrets.MASTER_STORAGE_ACCOUNT_KEY }}    

    - name: Azure SQL Deploy
      uses: Azure/sql-action@v1
      with:
        server-name: ${{ secrets.DB_SERVER_NAME }}
        connection-string: '${{ secrets.PAYMT_MNGR_DB_CONNECTION_STRING }}'
        dacpac-package: ${{ github.workspace }}\Znode_Multifront_Plugin_Payment\Znode_Multifront_Plugin_Payment\bin\Debug\Znode_Multifront_Plugin_Payment_${{ inputs.sandbox_run_number }}.dacpac
        arguments: '/p:BlockOnPossibleDataLoss=false /p:DropObjectsNotInSource=false'

  multifront_db_tag:
    runs-on: ubuntu-latest
    needs: build_deploy_multifront_db
    if: ${{ (inputs.branch == 'master' || contains(inputs.branch, 'hotfixes')) && inputs.environment == 'sandbox' }}

    steps:
      - name: Get the latest tag and increment
        id: increment_tag
        run: |
          GITHUB_TOKEN=${{ secrets.PAT }}
          RELEASE_TYPE="${{ inputs.release_type }}"
          # Get latest tag from GitHub API
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/MRRSoft/znode10-multifront-db/tags)
          latest_tag=$(echo "$response" | jq -r '.[].name' | grep -E '^v10\.[0-9]+\.[0-9]+\.0$' | sort -V | tail -n 1)
          if [ -z "$latest_tag" ]; then
            latest_tag="v10.0.0.0"
            echo "No valid tags found, starting from $latest_tag"
          fi
          echo "Latest tag found: $latest_tag"
          # Remove 'v' and split version
          version=$(echo "$latest_tag" | sed 's/^v//')
          major=$(echo "$version" | cut -d. -f1)
          minor=$(echo "$version" | cut -d. -f2)
          patch=$(echo "$version" | cut -d. -f3)
          if [ "$RELEASE_TYPE" == "major" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi
          new_tag="v${major}.${minor}.${patch}.0"
          new_release_name="Znode10-${new_tag}-Release"
          echo "New tag: $new_tag"
          echo "New release name: $new_release_name"
          # Set outputs
          echo "tag_name=$new_tag" >> $GITHUB_ENV
          echo "release_name=$new_release_name" >> $GITHUB_ENV

      - name: Create GitHub Release
        run: |
          GITHUB_TOKEN=${{ secrets.PAT }}
          repo="MRRSoft/znode10-multifront-db"
          tag="${{ env.tag_name }}"
          release_name="${{ env.release_name }}"
          response=$(curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$repo/releases \
            -d "{
              \"tag_name\": \"$tag\",
              \"name\": \"$release_name\",
              \"body\": \"Release $release_name created with tag $tag.\",
              \"draft\": false,
              \"prerelease\": true
            }")
          echo "Release created: $response"

  recommend_db_tag:
    runs-on: ubuntu-latest
    needs: build_deploy_recommendation_db
    if: ${{ (inputs.branch == 'master' || contains(inputs.branch, 'hotfixes')) && inputs.environment == 'sandbox' }}

    steps:
      - name: Get the latest tag and increment
        id: increment_tag
        run: |
          GITHUB_TOKEN=${{ secrets.PAT }}
          RELEASE_TYPE="${{ inputs.release_type }}"
          # Get latest tag from GitHub API
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/MRRSoft/znode10-recommendation-engine-db/tags)
          latest_tag=$(echo "$response" | jq -r '.[].name' | grep -E '^v10\.[0-9]+\.[0-9]+\.0$' | sort -V | tail -n 1)
          if [ -z "$latest_tag" ]; then
            latest_tag="v10.0.0.0"
            echo "No valid tags found, starting from $latest_tag"
          fi
          echo "Latest tag found: $latest_tag"
          # Remove 'v' and split version
          version=$(echo "$latest_tag" | sed 's/^v//')
          major=$(echo "$version" | cut -d. -f1)
          minor=$(echo "$version" | cut -d. -f2)
          patch=$(echo "$version" | cut -d. -f3)
          if [ "$RELEASE_TYPE" == "major" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi
          new_tag="v${major}.${minor}.${patch}.0"
          new_release_name="Znode10-${new_tag}-Release"
          echo "New tag: $new_tag"
          echo "New release name: $new_release_name"
          # Set outputs
          echo "tag_name=$new_tag" >> $GITHUB_ENV
          echo "release_name=$new_release_name" >> $GITHUB_ENV

      - name: Create GitHub Release
        run: |
          GITHUB_TOKEN=${{ secrets.PAT }}
          repo="MRRSoft/znode10-recommendation-engine-db"
          tag="${{ env.tag_name }}"
          release_name="${{ env.release_name }}"
          response=$(curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$repo/releases \
            -d "{
              \"tag_name\": \"$tag\",
              \"name\": \"$release_name\",
              \"body\": \"Release $release_name created with tag $tag.\",
              \"draft\": false,
              \"prerelease\": true
            }")
          echo "Release created: $response"

  hangfire_db_tag:
    runs-on: ubuntu-latest
    needs: build_deploy_hangfire_db
    if: ${{ (inputs.branch == 'master' || contains(inputs.branch, 'hotfixes')) && inputs.environment == 'sandbox' }}

    steps:
      - name: Get the latest tag and increment
        id: increment_tag
        run: |
          GITHUB_TOKEN=${{ secrets.PAT }}
          RELEASE_TYPE="${{ inputs.release_type }}"
          # Get latest tag from GitHub API
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/MRRSoft/znode10-hangfire-db/tags)
          latest_tag=$(echo "$response" | jq -r '.[].name' | grep -E '^v10\.[0-9]+\.[0-9]+\.0$' | sort -V | tail -n 1)
          if [ -z "$latest_tag" ]; then
            latest_tag="v10.0.0.0"
            echo "No valid tags found, starting from $latest_tag"
          fi
          echo "Latest tag found: $latest_tag"
          # Remove 'v' and split version
          version=$(echo "$latest_tag" | sed 's/^v//')
          major=$(echo "$version" | cut -d. -f1)
          minor=$(echo "$version" | cut -d. -f2)
          patch=$(echo "$version" | cut -d. -f3)
          if [ "$RELEASE_TYPE" == "major" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi
          new_tag="v${major}.${minor}.${patch}.0"
          new_release_name="Znode10-${new_tag}-Release"
          echo "New tag: $new_tag"
          echo "New release name: $new_release_name"
          # Set outputs
          echo "tag_name=$new_tag" >> $GITHUB_ENV
          echo "release_name=$new_release_name" >> $GITHUB_ENV

      - name: Create GitHub Release
        run: |
          GITHUB_TOKEN=${{ secrets.PAT }}
          repo="MRRSoft/znode10-hangfire-db"
          tag="${{ env.tag_name }}"
          release_name="${{ env.release_name }}"
          response=$(curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$repo/releases \
            -d "{
              \"tag_name\": \"$tag\",
              \"name\": \"$release_name\",
              \"body\": \"Release $release_name created with tag $tag.\",
              \"draft\": false,
              \"prerelease\": true
            }")
          echo "Release created: $response"

  payment_db_tag:
    runs-on: ubuntu-latest
    needs: build_deploy_payment_manager_db
    if: ${{ (inputs.branch == 'master' || contains(inputs.branch, 'hotfixes')) && inputs.environment == 'sandbox' }}

    steps:
      - name: Get the latest tag and increment
        id: increment_tag
        run: |
          GITHUB_TOKEN=${{ secrets.PAT }}
          RELEASE_TYPE="${{ inputs.release_type }}"
          # Get latest tag from GitHub API
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/MRRSoft/znode10-plugin-payment-db/tags)
          latest_tag=$(echo "$response" | jq -r '.[].name' | grep -E '^v10\.[0-9]+\.[0-9]+\.0$' | sort -V | tail -n 1)
          if [ -z "$latest_tag" ]; then
            latest_tag="v10.0.0.0"
            echo "No valid tags found, starting from $latest_tag"
          fi
          echo "Latest tag found: $latest_tag"
          # Remove 'v' and split version
          version=$(echo "$latest_tag" | sed 's/^v//')
          major=$(echo "$version" | cut -d. -f1)
          minor=$(echo "$version" | cut -d. -f2)
          patch=$(echo "$version" | cut -d. -f3)
          if [ "$RELEASE_TYPE" == "major" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi
          new_tag="v${major}.${minor}.${patch}.0"
          new_release_name="Znode10-${new_tag}-Release"
          echo "New tag: $new_tag"
          echo "New release name: $new_release_name"
          # Set outputs
          echo "tag_name=$new_tag" >> $GITHUB_ENV
          echo "release_name=$new_release_name" >> $GITHUB_ENV

      - name: Create GitHub Release
        run: |
          GITHUB_TOKEN=${{ secrets.PAT }}
          repo="MRRSoft/znode10-plugin-payment-db"
          tag="${{ env.tag_name }}"
          release_name="${{ env.release_name }}"
          response=$(curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$repo/releases \
            -d "{
              \"tag_name\": \"$tag\",
              \"name\": \"$release_name\",
              \"body\": \"Release $release_name created with tag $tag.\",
              \"draft\": false,
              \"prerelease\": true
            }")
          echo "Release created: $response"
