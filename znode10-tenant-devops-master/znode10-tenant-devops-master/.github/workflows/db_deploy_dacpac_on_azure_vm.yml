name: Deploy DACPAC to Remote SQL Server

on:
  workflow_dispatch:
    inputs:
      remote_sql_host:
        description: "Remote SQL Server host or IP"
        required: true
        type: string

      db_password:
        description: "SQL Server Password"
        required: true
        type: string

      build_number:
        description: "GitHub build number to locate DACPAC files"
        required: true
        type: string

      runner_name:
        description: "Self-hosted runner label"
        required: true
        type: string

      db_config_json:
        description: >
          JSON with DB deployment flags and default DB names.
          Example: {
            "multifront": {"deploy": false, "name": "Znode_Multifront_Dev"},
            "hangfire": {"deploy": false, "name": "Znode_Hangfire_Dev"},
            "recommendation": {"deploy": false, "name": "Znode_Recommendation_Dev"},
            "payment_manager": {"deploy": false, "name": "Znode_PaymentManager_Dev"}
          }
        required: true
        type: string

      multifront_db_name:
        description: "Target DB name for multifront"
        required: false
        type: string

      hangfire_db_name:
        description: "Target DB name for hangfire"
        required: false
        type: string

      recommendation_db_name:
        description: "Target DB name for recommendation"
        required: false
        type: string

      payment_manager_db_name:
        description: "Target DB name for payment manager"
        required: false
        type: string

jobs:
  parse_config:
    runs-on: ubuntu-latest
    outputs:
      multifront: ${{ steps.set-vars.outputs.multifront }}
      multifront_name: ${{ steps.set-vars.outputs.multifront_name }}
      hangfire: ${{ steps.set-vars.outputs.hangfire }}
      hangfire_name: ${{ steps.set-vars.outputs.hangfire_name }}
      recommendation: ${{ steps.set-vars.outputs.recommendation }}
      recommendation_name: ${{ steps.set-vars.outputs.recommendation_name }}
      payment_manager: ${{ steps.set-vars.outputs.payment_manager }}
      payment_manager_name: ${{ steps.set-vars.outputs.payment_manager_name }}
    steps:
      - name: Parse JSON config and resolve DB names
        id: set-vars
        run: |
          echo '${{ github.event.inputs.db_config_json }}' > config.json
          echo "multifront=$(jq -r '.multifront.deploy' config.json)" >> $GITHUB_OUTPUT
          echo "hangfire=$(jq -r '.hangfire.deploy' config.json)" >> $GITHUB_OUTPUT
          echo "recommendation=$(jq -r '.recommendation.deploy' config.json)" >> $GITHUB_OUTPUT
          echo "payment_manager=$(jq -r '.payment_manager.deploy' config.json)" >> $GITHUB_OUTPUT
          multifront_name="${{ github.event.inputs.multifront_db_name }}"
          hangfire_name="${{ github.event.inputs.hangfire_db_name }}"
          recommendation_name="${{ github.event.inputs.recommendation_db_name }}"
          payment_manager_name="${{ github.event.inputs.payment_manager_db_name }}"
          if [[ -z "$multifront_name" || "$multifront_name" == "null" ]]; then
            multifront_name=$(jq -r '.multifront.name' config.json)
          fi
          if [[ -z "$hangfire_name" || "$hangfire_name" == "null" ]]; then
            hangfire_name=$(jq -r '.hangfire.name' config.json)
          fi
          if [[ -z "$recommendation_name" || "$recommendation_name" == "null" ]]; then
            recommendation_name=$(jq -r '.recommendation.name' config.json)
          fi
          if [[ -z "$payment_manager_name" || "$payment_manager_name" == "null" ]]; then
            payment_manager_name=$(jq -r '.payment_manager.name' config.json)
          fi
          echo "multifront_name=$multifront_name" >> $GITHUB_OUTPUT
          echo "hangfire_name=$hangfire_name" >> $GITHUB_OUTPUT
          echo "recommendation_name=$recommendation_name" >> $GITHUB_OUTPUT
          echo "payment_manager_name=$payment_manager_name" >> $GITHUB_OUTPUT
  deploy_multifront_db:
    if: ${{ needs.parse_config.outputs.multifront == 'true' }}
    needs: parse_config
    runs-on: ${{ github.event.inputs.runner_name }}
    steps:
      - name: Install Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Download DACPAC
        env:
          AZURE_STORAGE_ACCOUNT: "storageamla"
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
        run: |
          mkdir -p ./dacpac
          az storage file download --account-name $AZURE_STORAGE_ACCOUNT --account-key $AZURE_STORAGE_KEY \
            --share-name multifront-dacpac \
            --path Znode_Multifront_Database_${{ github.event.inputs.build_number }}.dacpac \
            --dest ./dacpac/multifront.dacpac
      - name: Deploy Multifront DB
        env:
          DACPAC_FILE: "${{ github.workspace }}/dacpac/multifront.dacpac"
          DB_NAME: "${{ needs.parse_config.outputs.multifront_name }}"
          SQL_HOST: "${{ github.event.inputs.remote_sql_host }}"
          DB_USER: "${{ secrets.DB_USER }}"
          DB_PASS: "${{ github.event.inputs.db_password }}"
        run: |
          /opt/sqlpackage/sqlpackage /Action:Publish \
            /SourceFile:"$DACPAC_FILE" \
            /TargetConnectionString:"Server=$SQL_HOST;Database=$DB_NAME;User Id=$DB_USER;Password=$DB_PASS;Encrypt=True;TrustServerCertificate=True;" \
            /p:BlockOnPossibleDataLoss=false
  deploy_hangfire_db:
    if: ${{ needs.parse_config.outputs.hangfire == 'true' }}
    needs: parse_config
    runs-on: ${{ github.event.inputs.runner_name }}
    steps:
      - name: Install Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Download DACPAC
        env:
          AZURE_STORAGE_ACCOUNT: "storageamla"
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
        run: |
          mkdir -p ./dacpac
          az storage file download --account-name $AZURE_STORAGE_ACCOUNT --account-key $AZURE_STORAGE_KEY \
            --share-name hangfire-dacpac \
            --path Znode_Multifront_Hangfire_Database_${{ github.event.inputs.build_number }}.dacpac \
            --dest ./dacpac/hangfire.dacpac
      - name: Deploy Hangfire DB
        env:
          DACPAC_FILE: "${{ github.workspace }}/dacpac/hangfire.dacpac"
          DB_NAME: "${{ needs.parse_config.outputs.hangfire_name }}"
          SQL_HOST: "${{ github.event.inputs.remote_sql_host }}"
          DB_USER: "${{ secrets.DB_USER }}"
          DB_PASS: "${{ github.event.inputs.db_password }}"
        run: |
          /opt/sqlpackage/sqlpackage /Action:Publish \
            /SourceFile:"$DACPAC_FILE" \
            /TargetConnectionString:"Server=$SQL_HOST;Database=$DB_NAME;User Id=$DB_USER;Password=$DB_PASS;Encrypt=True;TrustServerCertificate=True;" \
            /p:BlockOnPossibleDataLoss=false
  deploy_recommendation_db:
    if: ${{ needs.parse_config.outputs.recommendation == 'true' }}
    needs: parse_config
    runs-on: ${{ github.event.inputs.runner_name }}
    steps:
      - name: Install Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Download DACPAC
        env:
          AZURE_STORAGE_ACCOUNT: "storageamla"
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
        run: |
          mkdir -p ./dacpac
          az storage file download --account-name $AZURE_STORAGE_ACCOUNT --account-key $AZURE_STORAGE_KEY \
            --share-name rceg-dacpac \
            --path Znode_Multifront_RecommendationEngine_Database_${{ github.event.inputs.build_number }}.dacpac \
            --dest ./dacpac/recommendation.dacpac
      - name: Deploy Recommendation DB
        env:
          DACPAC_FILE: "${{ github.workspace }}/dacpac/recommendation.dacpac"
          DB_NAME: "${{ needs.parse_config.outputs.recommendation_name }}"
          SQL_HOST: "${{ github.event.inputs.remote_sql_host }}"
          DB_USER: "${{ secrets.DB_USER }}"
          DB_PASS: "${{ github.event.inputs.db_password }}"
        run: |
          /opt/sqlpackage/sqlpackage /Action:Publish \
            /SourceFile:"$DACPAC_FILE" \
            /TargetConnectionString:"Server=$SQL_HOST;Database=$DB_NAME;User Id=$DB_USER;Password=$DB_PASS;Encrypt=True;TrustServerCertificate=True;" \
            /p:BlockOnPossibleDataLoss=false
  deploy_payment_manager_db:
    if: ${{ needs.parse_config.outputs.payment_manager == 'true' }}
    needs: parse_config
    runs-on: ${{ github.event.inputs.runner_name }}
    steps:
      - name: Install Azure CLI
        run: curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Download DACPAC
        env:
          AZURE_STORAGE_ACCOUNT: "storageamla"
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
        run: |
          mkdir -p ./dacpac
          az storage file download --account-name $AZURE_STORAGE_ACCOUNT --account-key $AZURE_STORAGE_KEY \
            --share-name payment-dacpac \
            --path Znode_Multifront_Plugin_Payment_Database_${{ github.event.inputs.build_number }}.dacpac \
            --dest ./dacpac/payment.dacpac
      - name: Deploy Payment Manager DB
        env:
          DACPAC_FILE: "${{ github.workspace }}/dacpac/payment.dacpac"
          DB_NAME: "${{ needs.parse_config.outputs.payment_manager_name }}"
          SQL_HOST: "${{ github.event.inputs.remote_sql_host }}"
          DB_USER: "${{ secrets.DB_USER }}"
          DB_PASS: "${{ github.event.inputs.db_password }}"
        run: |
          /opt/sqlpackage/sqlpackage /Action:Publish \
            /SourceFile:"$DACPAC_FILE" \
            /TargetConnectionString:"Server=$SQL_HOST;Database=$DB_NAME;User Id=$DB_USER;Password=$DB_PASS;Encrypt=True;TrustServerCertificate=True;" \
            /p:BlockOnPossibleDataLoss=false