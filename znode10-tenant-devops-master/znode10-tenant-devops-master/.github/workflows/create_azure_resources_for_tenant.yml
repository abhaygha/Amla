name: Create Azure Resources For Tenant

on:
  workflow_dispatch:
    inputs:
      tenant:
        type: string
        description: Enter new tenant name
        required: true
      location:
        type: choice
        description: Select the location
        required: true
        options:
        - centralus
        - eastus
      environment:
        type: choice
        description: Select the environment
        required: true
        options:
        - dev
        - qa
        - stage
        - sandbox
        - prod
        - knox

      resources_type:
        type: choice
        description: Select the resources type
        required: true
        options:
        - small
        - medium
        - large

      # basic_resources:
      #   description: 'Basic Resources'
      #   required: true
      #   default: false
      #   type: boolean
      # standard_resources:
      #   description: 'Standard Resources'
      #   required: true
      #   default: false
      #   type: boolean
      # premium_resources:
      #   description: 'Premium Resources'
      #   required: true
      #   default: false
      #   type: boolean

jobs:
  small:
    if: ${{ github.event.inputs.resources_type == 'small' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: checkout code
        uses: actions/checkout@v2
        with: 
          ref: master

      - name: Small
        run: echo "small resources"

      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: create resource group
        uses: Azure/CLI@v1
        with:
          inlineScript: |
            #!/bin/bash
            az group create --name ${{ inputs.tenant }}${{ inputs.environment }} --location ${{ inputs.location }}
            echo "Azure resource group created"

      - name: create acr
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ inputs.tenant }}${{ inputs.environment }}
          template: templates/acr_basic.json
          parameters: znode10_registry_name=${{ inputs.tenant }}${{ inputs.environment }} #location=${{ inputs.location }}


      - name: create azure storage  
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ inputs.tenant }}${{ inputs.environment }}
          template: templates/storage.json
          parameters: znode10_azure_storage_name=${{ inputs.tenant }}${{ inputs.environment }} #location=${{ inputs.location }}

      - name: create sql server
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ inputs.tenant }}${{ inputs.environment }}
          template: templates/sqlserver_small.json
          parameters: serverName=db-${{ inputs.tenant }}${{ inputs.environment }}
                      location=${{ inputs.location }}
                      administratorLogin=${{ inputs.tenant }}${{ inputs.environment }}
                      administratorLoginPassword=${{ secrets.SQL_PASSWORD }}
        

      - name: create aks cluster
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ inputs.tenant }}${{ inputs.environment }}
          template: templates/aks_small.json
          parameters: znode10_aks_cluster_name=${{ inputs.tenant }}${{ inputs.environment }}
                      location=${{ inputs.location }}

      # - name: attach an ACR to an AKS cluster
      #   uses: Azure/CLI@v1
      #   with:
      #     inlineScript: |
      #       #!/bin/bash
      #       az aks update --name ${{ inputs.tenant }}${{ inputs.environment }} --resource-group ${{ inputs.tenant }}${{ inputs.environment }} --attach-acr ${{ inputs.tenant }}${{ inputs.environment }}
      #       az aks update --enable-blob-driver -n ${{ inputs.tenant }}${{ inputs.environment }} -g ${{ inputs.tenant }}${{ inputs.environment }}
  medium:
    if: ${{ github.event.inputs.resources_type == 'medium' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: checkout code
        uses: actions/checkout@v2
        with: 
            ref: master

      - name: Medium
        run: echo "Medium resources"

      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: create resource group
        uses: Azure/CLI@v1
        with:
          inlineScript: |
            #!/bin/bash
            az group create --name ${{ inputs.tenant }}${{ inputs.environment }} --location ${{ inputs.location }}
            echo "Azure resource group created"

      - name: create acr
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ inputs.tenant }}${{ inputs.environment }}
          template: templates/acr_standard.json
          parameters: znode10_registry_name=${{ inputs.tenant }}${{ inputs.environment }} #location=${{ inputs.location }}


      - name: create azure storage  
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ inputs.tenant }}${{ inputs.environment }}
          template: templates/storage.json
          parameters: znode10_azure_storage_name=${{ inputs.tenant }}${{ inputs.environment }} #location=${{ inputs.location }}

      - name: create sql server
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ inputs.tenant }}${{ inputs.environment }}
          template: templates/sqlserver_standard.json
          parameters: serverName=db-${{ inputs.tenant }}${{ inputs.environment }}
                        location=${{ inputs.location }}
                        administratorLogin=${{ inputs.tenant }}${{ inputs.environment }}
                        administratorLoginPassword=${{ secrets.SQL_PASSWORD }}

      - name: create aks cluster
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ inputs.tenant }}${{ inputs.environment }}
          template: templates/aks_standard.json
          parameters: znode10_aks_cluster_name=${{ inputs.tenant }}${{ inputs.environment }}
                      location=${{ inputs.location }}

      # - name: attach an ACR to an AKS cluster
      #   uses: Azure/CLI@v1
      #   with:
      #     inlineScript: |
      #       #!/bin/bash
      #       az aks update --name ${{ inputs.tenant }}${{ inputs.environment }} --resource-group ${{ inputs.tenant }}${{ inputs.environment }} --attach-acr ${{ inputs.tenant }}${{ inputs.environment }}
      #       az aks update --enable-blob-driver -n ${{ inputs.tenant }}${{ inputs.environment }} -g ${{ inputs.tenant }}${{ inputs.environment }}
  large:
    if: ${{ github.event.inputs.resources_type == 'large' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: checkout code
        uses: actions/checkout@v2
        with: 
            ref: master

      - name: Large
        run: echo "large resources"

      - name: azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: create resource group
        uses: Azure/CLI@v1
        with:
          inlineScript: |
            #!/bin/bash
            az group create --name ${{ inputs.tenant }}${{ inputs.environment }} --location ${{ inputs.location }}
            echo "Azure resource group created"

      - name: create acr
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ inputs.tenant }}${{ inputs.environment }}
          template: templates/acr_standard.json
          parameters: znode10_registry_name=${{ inputs.tenant }}${{ inputs.environment }} #location=${{ inputs.location }}


      - name: create azure storage  
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ inputs.tenant }}${{ inputs.environment }}
          template: templates/storage.json
          parameters: znode10_azure_storage_name=${{ inputs.tenant }}${{ inputs.environment }} #location=${{ inputs.location }}

      - name: create sql server
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ inputs.tenant }}${{ inputs.environment }}
          template: templates/sqlserver_standard.json
          parameters: serverName=db-${{ inputs.tenant }}${{ inputs.environment }}
                      location=${{ inputs.location }}
                      administratorLogin=${{ inputs.tenant }}${{ inputs.environment }}
                      administratorLoginPassword=${{ secrets.SQL_PASSWORD }}

      - name: create aks cluster
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ inputs.tenant }}${{ inputs.environment }}
          template: templates/aks_premium.json
          parameters: znode10_aks_cluster_name=${{ inputs.tenant }}${{ inputs.environment }}
                      location=${{ inputs.location }}

      # - name: attach an ACR to an AKS cluster
      #   uses: Azure/CLI@v1
      #   with:
      #     inlineScript: |
      #       #!/bin/bash
      #       az aks update --name ${{ inputs.tenant }}${{ inputs.environment }} --resource-group ${{ inputs.tenant }}${{ inputs.environment }} --attach-acr ${{ inputs.tenant }}${{ inputs.environment }}
      #       az aks update --enable-blob-driver -n ${{ inputs.tenant }}${{ inputs.environment }} -g ${{ inputs.tenant }}${{ inputs.environment }}
