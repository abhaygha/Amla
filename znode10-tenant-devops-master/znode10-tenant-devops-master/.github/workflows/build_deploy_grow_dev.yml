name: Build and Deploy Grow Dev

on:
  workflow_dispatch:
    inputs:
      branch:
        description: Specifies the feature branch, if any
        required: true
        default: z10-grow-poc

      webstore:
        description: 'webstore'
        required: true
        default: true
        type: boolean

      admin:
        description: 'admin'
        required: true
        default: true
        type: boolean

      api:
        description: 'api'
        required: true
        default: true
        type: boolean

      api_v2:
        description: 'api-v2'
        required: true
        default: true
        type: boolean

      customtable:
        description: 'customtable'
        required: true
        default: true
        type: boolean


jobs:
  webstore_build:
    runs-on: ubuntu-latest
    if: github.event.inputs.webstore == 'true'
    environment: growdev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-webstore
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ inputs.branch }}

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.GROW_ACRUN }}
          password: ${{ secrets.GROW_ACRPW }}
          registry: ${{ secrets.GROW_ACR_SERVER }}.azurecr.io

      - name: Docker Compose Build
        working-directory: ./
        run: docker compose --env-file .env.grow build --build-arg EnvFile=.env.grow --no-cache

      - name: Docker Compose Push
        working-directory: ./
        run: docker compose --env-file .env.grow push

      - name: Docker Logout
        if: always()
        continue-on-error: true
        run: docker logout ${{ secrets.GROW_ACR_SERVER }}.azurecr.io

  admin_build:
    runs-on: ubuntu-latest
    if: github.event.inputs.admin == 'true'
    environment: growdev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-admin-migration
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ inputs.branch }}

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.GROW_ACRUN }}
          password: ${{ secrets.GROW_ACRPW }}
          registry: ${{ secrets.GROW_ACR_SERVER }}.azurecr.io

      - name: Docker Compose Build
        working-directory: ./Znode.Admin
        run: docker compose --env-file .env.grow build

      - name: Docker Compose Push
        working-directory: ./Znode.Admin
        run: docker compose --env-file .env.grow push

      - name: Docker Logout
        if: always()
        continue-on-error: true
        run: docker logout ${{ secrets.GROW_ACR_SERVER }}.azurecr.io

  api_build:
    runs-on: ubuntu-latest
    if: github.event.inputs.api == 'true'
    environment: growdev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-api-migration
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ inputs.branch }}

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.GROW_ACRUN }}
          password: ${{ secrets.GROW_ACRPW }}
          registry: ${{ secrets.GROW_ACR_SERVER }}.azurecr.io

      - name: Docker Compose Build
        working-directory: ./Znode.Multifront
        run: docker compose --env-file .env.grow build

      - name: Docker Compose Push
        working-directory: ./Znode.Multifront
        run: docker compose --env-file .env.grow push

      - name: Docker Logout
        if: always()
        continue-on-error: true
        run: docker logout ${{ secrets.GROW_ACR_SERVER }}.azurecr.io

  customtable_build:
    runs-on: ubuntu-latest
    if: github.event.inputs.customtable == 'true'
    environment: growdev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-api-migration
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ inputs.branch }}

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.GROW_ACRUN }}
          password: ${{ secrets.GROW_ACRPW }}
          registry: ${{ secrets.GROW_ACR_SERVER }}.azurecr.io

      - name: Docker Compose Build
        working-directory: ./Znode.Multifront
        run: docker compose -f docker-compose-customtable.yml --env-file .env.grow build

      - name: Docker Compose Push
        working-directory: ./Znode.Multifront
        run: docker compose -f docker-compose-customtable.yml --env-file .env.grow push

      - name: Docker Logout
        if: always()
        continue-on-error: true
        run: docker logout ${{ secrets.GROW_ACR_SERVER }}.azurecr.io

  api_v2_build:
    runs-on: ubuntu-latest
    if: github.event.inputs.api_v2 == 'true'
    environment: growdev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-api-migration
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ inputs.branch }}

      - name: Setup .Net
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 7.0.x

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.GROW_ACRUN }}
          password: ${{ secrets.GROW_ACRPW }}
          registry: ${{ secrets.GROW_ACR_SERVER }}.azurecr.io

      - name: Docker Compose Build
        working-directory: ./Znode.Multifront
        run: docker compose -f docker-compose-v2-api.yml --env-file .env.grow build

      - name: Docker Compose Push
        working-directory: ./Znode.Multifront
        run: docker compose -f docker-compose-v2-api.yml --env-file .env.grow push

      - name: Docker Logout
        if: always()
        continue-on-error: true
        run: docker logout ${{ secrets.GROW_ACR_SERVER }}.azurecr.io

  deploy_webstore:
      runs-on: ubuntu-latest
      needs: webstore_build
      if: github.event.inputs.webstore == 'true' && needs.webstore_build.result == 'success'
      environment: growdev
      steps:
        - name: Checkout repository
          uses: actions/checkout@v2
          with:
            ref: master

        - name: Login to Azure
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

        - name: Set up Kubeconfig
          run: |
            mkdir -p ~/.kube
            echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          shell: bash

        - name: Delete existing ConfigMaps
          run: |
            kubectl delete configmap znode10xwebstore -n znode

        - name: Terraform Init and Apply ConfigMap
          working-directory: ./tenants/grow/dev/terraform
          run: terraform init && terraform apply -target=kubernetes_config_map.znode10xwebstore -auto-approve

        - name: Recreate Pods
          working-directory: ./tenants/grow/dev/deploy/app/pods
          run: |
            kubectl delete -f kube-deploy-webstore.yml -n znode
            kubectl create -f kube-deploy-webstore.yml -n znode

  deploy_admin:
    runs-on: ubuntu-latest
    needs: admin_build
    if: github.event.inputs.admin == 'true' && needs.admin_build.result == 'success'
    environment: growdev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
        shell: bash

      - name: Delete existing ConfigMaps
        run: |
          kubectl delete configmap znode10xadmin -n znode

      - name: Terraform Init and Apply ConfigMap
        working-directory: ./tenants/grow/dev/terraform
        run: terraform init && terraform apply -target=kubernetes_config_map.znode10xadmin -auto-approve

      - name: Recreate Pods
        working-directory: ./tenants/grow/dev/deploy/app/pods
        run: |
          kubectl delete -f kube-deploy-admin.yml -n znode
          kubectl create -f kube-deploy-admin.yml -n znode

  deploy_api:
    runs-on: ubuntu-latest
    needs: api_build
    if: github.event.inputs.api == 'true' && needs.api_build.result == 'success'
    environment: growdev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
        shell: bash

      - name: Delete existing ConfigMaps
        run: |
          kubectl delete configmap znode10xapi -n znode

      - name: Terraform Init and Apply ConfigMap
        working-directory: ./tenants/grow/dev/terraform
        run: terraform init && terraform apply -target=kubernetes_config_map.znode10xapi -auto-approve

      - name: Recreate Pods
        working-directory: ./tenants/grow/dev/deploy/app/pods
        run: |
          kubectl delete -f kube-deploy-api.yml -n znode
          kubectl create -f kube-deploy-api.yml -n znode

  deploy_customtable:
    runs-on: ubuntu-latest
    needs: customtable_build
    if: github.event.inputs.customtable == 'true' && needs.customtable_build.result == 'success'
    environment: growdev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
        shell: bash

      - name: Delete existing ConfigMaps
        run: |
          kubectl delete configmap znode10xcustomtable -n znode

      - name: Terraform Init and Apply ConfigMap
        working-directory: ./tenants/grow/dev/terraform
        run: terraform init && terraform apply -target=kubernetes_config_map.znode10xcustomtable -auto-approve

      - name: Recreate Pods
        working-directory: ./tenants/grow/dev/deploy/app/pods
        run: |
           kubectl delete -f kube-deploy-customtable.yml -n znode
           kubectl create -f kube-deploy-customtable.yml -n znode

  deploy_api_v2:
    runs-on: ubuntu-latest
    needs: api_v2_build
    if: github.event.inputs.api_v2 == 'true' && needs.api_v2_build.result == 'success'
    environment: growdev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
        shell: bash

      - name: Delete existing ConfigMaps
        run: |
          kubectl delete configmap znode10xcustomer -n znode

      - name: Terraform Init and Apply ConfigMap
        working-directory: ./tenants/grow/dev/terraform
        run: terraform init && terraform apply -target=kubernetes_config_map.znode10xcustomer -auto-approve

      - name: Recreate Pods
        working-directory: ./tenants/grow/dev/deploy/app/pods
        run: |
          kubectl delete -f kube-deploy-api-v2.yml -n znode
          kubectl create -f kube-deploy-api-v2.yml -n znode

