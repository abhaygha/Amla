name: Build and Deploy STAGE using Helm Chart on AKS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'The target environment for deployment'
        required: true
        default: 'st'
        type: choice
        options:
          - st
          - np

      branch:
        description: 'The branch to deploy from'
        required: true
        default: 'master'

      all:
        description: 'Build Deploy ALL'
        required: false
        default: false
        type: boolean       

      services:
        description: 'Deploy Applications (Set the following values to true)'
        required: false
        default: '{"wbst": false, "pgbld": false, "admin": false, "api": false, "gateway": false, "customtable": false, "v2": false, "a-commerce": false, "portal": false, "cstm": false, "paymngr": false, "spreedly": false, "braintree": false, "reports": false, "azfunction": false, "shipping": false, "fedex": false, "ups": false, "taxmng": false, "avatax": false, "graphql": false,"cc-api": false, "cc-admin": false}'
        type: string

      tenant:
        description: 'Client/Tenant Name'
        required: true
        default: 'z10'
        type: choice
        options:
          - z10
          - htfx
      namespace:
        description: 'Namespace'
        required: true
        default: 'znode'
        
      release_version_number:
        description: 'Current Release version'
        required: true
        type: string
        
      # image_tag:
      #   description: 'The tag of images to sync (e.g.,release-version-number)'
      #   required: true
      #   type: string
      #   default: '10.0.0.0'

env:
 IMAGE_TAG: ${{ github.event.inputs.release_version_number }} 


jobs:
 # Parse the JSON input and create an environment variable listing all services that need deployment
  parse_services:
    runs-on: ubuntu-latest
    outputs:
      services_list: ${{ steps.set_services.outputs.services_list }}
    steps:
      - name: Parse services JSON
        id: set_services
        run: |
          if [[ "${{ github.event.inputs.all }}" == "true" ]]; then
            SERVICES="wbst,pgbld,admin,api,gateway,customtable,v2,a-commerce,portal,cstm,paymngr,spreedly,braintree,reports,shipping,fedex,ups,azfunction,graphqlapi,taxmanager,avatax,cc-api,cc-admin"
          else
            SERVICES=$(echo '${{ github.event.inputs.services }}' | jq -r 'to_entries[] | select(.value == true) | .key' | paste -sd "," -)
          fi
          echo "Services to deploy: $SERVICES"
          echo "::set-output name=services_list::${SERVICES}"

      - name: Debug services list
        run: |
          echo "Services list: ${{ steps.set_services.outputs.services_list }}"

        
  webstore_deployment:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'wbst') || github.event.inputs.all == 'true'

    steps:
              
      - name: Checkout Webstore Repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode-webstore10x-page-builder
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ github.event.inputs.branch }}
 
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          
        

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build and Push
        working-directory: ./
        run: |
          echo "Creating .env file dynamically during runtime..."
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          echo "AppName=webstore" >> .env
          echo "FilePath=./apps/webstore/Dockerfile" >> .env
          echo "ImageName=znode10xwebstoreimage" >> .env
          echo "Generated .env file contents:"
          cat .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures

      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 Webstore ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  pagebuilder_deployment:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'pgbld') || github.event.inputs.all == 'true'

    steps:
    
      - name: Checkout Webstore Repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode-webstore10x-page-builder
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ github.event.inputs.branch }}
    
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          
        

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build and Push
        working-directory: ./
        run: |
          echo "Creating .env file dynamically during runtime..."
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          echo "AppName=page-builder" >> .env
          echo "FilePath=./apps/page-builder/Dockerfile" >> .env
          echo "ImageName=znode10xpagebuilder" >> .env
          echo "Generated .env file contents:"
          cat .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures
        
      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 PageBuilder ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  admin_deployment:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'admin') || github.event.inputs.all == 'true'

    steps:
    
      - name: Checkout Admin Repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-admin-migration
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build and Push
        working-directory: ./Znode.Admin
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures         

      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 Admin ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  api_deployment:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'api') || github.event.inputs.all == 'true'

    steps:

              
      - name: Checkout API Repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-api-migration
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build and Push
        working-directory: ./Znode.Multifront
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures
        
      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 API ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  gateway_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'gateway') || github.event.inputs.all == 'true'
    steps:

              
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-api-gateways
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build and Push
        working-directory: ./Znode.APIGateways
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures
        
      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 Gateways ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  customtable_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'customtable') || github.event.inputs.all == 'true'
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-api-migration
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build and Push
        working-directory: ./Znode.Multifront
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose-customtable.yml build --no-cache
          docker compose -f docker-compose-customtable.yml push --ignore-push-failures
    
      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 Customtable ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}


  api-v2_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'v2') || github.event.inputs.all == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-api-migration
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build and Push
        working-directory: ./Znode.Multifront
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose-v2-api.yml build --no-cache
          docker compose -f docker-compose-v2-api.yml push --ignore-push-failures

      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 API-V2 ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  apicp_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'a-commerce') || github.event.inputs.all == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-commerceportal-api
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{inputs.branch}}


      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build 
        working-directory: Znode_CommercePortal/
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures

      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 API-CP ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  cp_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'portal') || github.event.inputs.all == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-commerceportal
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{inputs.branch}}

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2  

      - name: Docker Login
        uses: docker/login-action@v2
        with:
            username: ${{ secrets.Z10ST_ACR_UN }}
            password: ${{ secrets.Z10ST_ACR_PW }}
            registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build 
        working-directory: .
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures

      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 CP ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  customapi_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'cstm') || github.event.inputs.all == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-customapi-sdk
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{inputs.branch}}

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2  

      - name: Docker Login
        uses: docker/login-action@v2
        with:
            username: ${{ secrets.Z10ST_ACR_UN }}
            password: ${{ secrets.Z10ST_ACR_PW }}
            registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build 
        working-directory: .
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures

      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 Customapi ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  payment_manager_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'paymngr') || github.event.inputs.all == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2  
        with:
          repository: MRRSoft/znode10-payment-manager
          token: ${{ secrets.ACCESS_REPO }} 
          ref: ${{inputs.branch}}

                  
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build 
        working-directory: ./API/Znode.Payment.Manager/ 
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures

      - name: Deployment Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 Payment Manager ${{ github.event.inputs.environment }} Deployment
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  plugin_spreedly_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'spreedly') || github.event.inputs.all == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-plugin-payment-spreedly
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{inputs.branch}}
        
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build 
        working-directory: ./API
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures

      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 Spreedly ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  plugin_braintree_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'braintree') || github.event.inputs.all == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-plugin-payment-braintree
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{inputs.branch}}

      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build 
        working-directory: ./API
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures


      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 Braintree ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}
  ######## Reports############

  reports_api_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'reports') || github.event.inputs.all == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-reports-api
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{inputs.branch}}

      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build 
        working-directory: ./Znode.Reports
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures

      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 Reports API ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}
  ######## shipping manager

  shipping_manager_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'shipping') || github.event.inputs.all == 'true'

    steps:
      - name: Checkout repositor
        uses: actions/checkout@v2  
        with:
          repository: MRRSoft/znode10-shipping-manager
          token: ${{ secrets.ACCESS_REPO }} 
          ref: ${{inputs.branch}}

                  
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build 
        working-directory: ./API/Znode.Shipping.Manager/ 
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures

      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 Shipping Manager ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  plugin_fedex_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'fedex') || github.event.inputs.all == 'true'
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-plugin-shipping-fedex
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{inputs.branch}}
        
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build 
        working-directory: ./API/Znode.Plugin.Shipping.Fedex/
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures

      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 Fedex ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  plugin_ups_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'ups') || github.event.inputs.all == 'true'
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-plugin-shipping-ups
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{inputs.branch}}

        
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build 
        working-directory: ./API/Znode.Plugin.Shipping.UPS/
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures

      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 Ups ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  azfunction_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'azfunction') || github.event.inputs.all == 'true'      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-api-migration
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ github.event.inputs.branch }}

        
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build 
        working-directory: ./Znode.AzureFunction
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose-azfunctions.yml build --no-cache
          docker compose -f docker-compose-azfunctions.yml push --ignore-push-failures

      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 Azfunction ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  graphqlapi_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'graphql') || github.event.inputs.all == 'true'
    
    steps:

      - name: Checkout API Repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-graphql-api
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build and Push
        working-directory: ./
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures

      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 GRAPHQL ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  taxmanager_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'taxmanager') || github.event.inputs.all == 'true'
            
    steps:
              
      - name: Checkout API Repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-tax-manager
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build and Push
        working-directory: ./API/Znode.Tax.Manager/
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures
          
      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 TAXMANAGER ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}
          
  avatax_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'avatax') || github.event.inputs.all == 'true'
            
    steps:
              
      - name: Checkout API Repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-plugin-tax-avatax
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: v2.38.2          

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build and Push
        working-directory: ./API/Znode.Plugin.Tax.Avatax/
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures

      - name: Build Failed Notification
        if: ${{ failure() }}
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: Z10 AVATAX ${{ github.event.inputs.environment }} Build
          url: ${{ secrets.DEPLOYMENT_FAILED_ALERTS }}
          status: ${{ job.status }}

  diagnostic_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'diagno') || github.event.inputs.all == 'true'
              
    steps:

      - name: Checkout API Repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode-diagnostic-app
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ github.event.inputs.branch }}

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build and Push
        working-directory: ./
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.DEV_ACR_SERVER }}.azurecr.io" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures



  pythonapi_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'python') || github.event.inputs.all == 'true'
              
    steps:

      - name: Checkout API Repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode10-publish-elasticindex
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ github.event.inputs.branch }}

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build and Push
        working-directory: ./
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose.yml build --no-cache
          docker compose -f docker-compose.yml push --ignore-push-failures
  cc_api_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'cc-api') || github.event.inputs.all == 'true'
              
    steps:

      - name: Checkout API Repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode-commerce-connector-poc
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ github.event.inputs.branch }}

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build and Push
        working-directory: ./
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose-cc-api.yml build --no-cache
          docker compose -f docker-compose-cc-api.yml push --ignore-push-failures

  cc_admin_build:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: parse_services
    if: contains(needs.parse_services.outputs.services_list, 'cc-admin') || github.event.inputs.all == 'true'
              
    steps:

      - name: Checkout API Repository
        uses: actions/checkout@v2
        with:
          repository: MRRSoft/znode-commerce-connector-poc
          token: ${{ secrets.ACCESS_REPO }}
          ref: ${{ github.event.inputs.branch }}

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.Z10ST_ACR_UN }}
          password: ${{ secrets.Z10ST_ACR_PW }}
          registry: ${{ secrets.Z10ST_ACR_SERVER }}

      - name: Docker Compose Build and Push
        working-directory: ./
        run: |
          echo "Tag=${{ env.IMAGE_TAG }}" > .env
          echo "AmlaRegistry=${{ secrets.Z10ST_ACR_SERVER }}" >> .env
          docker compose -f docker-compose-cc-admin.yml build --no-cache
          docker compose -f docker-compose-cc-admin.yml push --ignore-push-failures
          
  deploy:
      name: Deploy Znode10x Helm Chart
      runs-on: ubuntu-latest
      environment: ${{ github.event.inputs.tenant }}${{ github.event.inputs.environment }}
      needs:
        - parse_services  
        - api_deployment
        - api-v2_build
        - customtable_build
        - gateway_build
        - azfunction_build
        - webstore_deployment
        - pagebuilder_deployment
        - admin_deployment
        - apicp_build
        - cp_build
        - customapi_build
        - payment_manager_build
        - plugin_spreedly_build
        - plugin_braintree_build
        - reports_api_build
        - shipping_manager_build
        - plugin_fedex_build
        - plugin_ups_build
        - graphqlapi_build
        - taxmanager_build
        - avatax_build
        - diagnostic_build
        - pythonapi_build
        - cc_api_build
        - cc_admin_build
      if: always() && (
        needs.api_deployment.result == 'success' ||
        needs.api-v2_build.result == 'success' ||
        needs.customtable_build.result == 'success' ||
        needs.gateway_build.result == 'success' ||
        needs.azfunction_build.result == 'success' ||
        needs.webstore_deployment.result == 'success' ||
        needs.pagebuilder_deployment.result == 'success' ||
        needs.admin_deployment.result == 'success' ||
        needs.apicp_build.result == 'success' ||
        needs.cp_build.result == 'success' ||
        needs.customapi_build.result == 'success' ||
        needs.payment_manager_build.result == 'success' ||
        needs.plugin_spreedly_build.result == 'success' ||
        needs.plugin_braintree_build.result == 'success' ||
        needs.reports_api_build.result == 'success' ||
        needs.shipping_manager_build.result == 'success' ||
        needs.plugin_fedex_build.result == 'success' ||
        needs.plugin_ups_build.result == 'success' ||
        needs.taxmanager_build.result == 'success' ||
        needs.graphqlapi_build.result == 'success' ||
        needs.avatax_build.result == 'success'     ||
        needs.diagnostic_build.result == 'success' ||
        needs.pythonapi_build.result == 'success' || 
        needs.cc_api_build.result == 'success' ||
        needs.cc_admin_build.result == 'success'
        )

      steps:
        - name: Checkout Template Repository
          uses: actions/checkout@v2
          with:
            repository: MRRSoft/znode10-devops-templates
            token: ${{ secrets.ACCESS_REPO }}
            ref: master

        - name: Kubernetes Set up
          uses: azure/k8s-set-context@v1
          with:
            kubeconfig: ${{ secrets.KUBECONFIG }}
            version: '1.19.9'

        - name: Set up Helm
          uses: azure/setup-helm@v3
          with:
            version: v3.13.2

            
        - name: Install jq
          run: |
            sudo apt-get update && sudo apt-get install -y jq


        - name: Deploy selected services via Helm
          working-directory: ./helm-aks/znode10-helm
          run: |
            echo "Deploying to environment: ${{ inputs.tenant }}${{ inputs.environment }}"
            echo '${{ vars.IMAGE_TAGS }}' > image_tags.json
            set_args=""
            for service in $(jq -r 'keys[]' image_tags.json); do
              tag=$(jq -r --arg svc "$service" '.[$svc]' image_tags.json)
              if [[ -n "$tag" && "$tag" != "null" ]]; then
                echo "✅ Using provided tag for $service: $tag"
              else
                current_image=$(kubectl get deployment $service -n ${{ inputs.namespace }} -o jsonpath='{.spec.template.spec.containers[0].image}' || true)
                if [[ -n "$current_image" ]]; then
                  current_tag=$(echo "$current_image" | awk -F':' '{print $2}')
                  tag="$current_tag"
                else
                  echo "❌ ERROR: Deployment for $service not found. Cannot continue."
                  exit 1
                fi
              fi
              set_args="$set_args --set-string resources.$service.image.tag=$tag"
            done

            helm upgrade --install znode10x . \
              --namespace ${{ inputs.namespace }} \
              -f default-values.yml \
              -f internal-values.yml \
              -f ${{ github.event.inputs.tenant }}-${{ inputs.environment }}-values.yml \
              -f ingress-values.yml \
              -f ${{ vars.CATEGORY }}-values.yml \
              --set global.tenant=${{ inputs.tenant }} \
              --set global.environment=${{ inputs.environment }} \
              --set global.domain=${{ vars.URL }} \
              --set global.webstoreURL=${{ vars.WEBSTORE_URL }} \
              --set global.imageRegistry=${{ vars.ACR_SERVER }} \
              --set global.imagePullSecrets=${{ vars.BLACKBOX }} \
              --set global.tenantacr.imageRegistry=${{ vars.TENANT_ACR_SERVER }} \
              --set global.clusterType=${{ vars.CLUSTER_TYPE }} \
              --set global.ingressClassName=${{ inputs.tenant }}${{ inputs.environment }} \
              --set-string global.db.wbst_db='${{ secrets.DB_WBST }}' \
              --set-string global.db.pymt_db='${{ secrets.DB_PYMT }}' \
              --set-string global.db.hgfr_db='${{ secrets.DB_HGFR }}' \
              --set-string global.db.rceg_db='${{ secrets.DB_RCEG }}' \
              --set-string storage.name="${{ secrets.STORAGE_NAME }}" \
              --set-string storage.url="https://${{ secrets.STORAGE_NAME }}.blob.core.windows.net" \
              --set-string storage.connection_string="${{ secrets.STORAGE_CONN }}" \
              --set-string global.newrelic.licensekey="${{ secrets.NEWRELIC_KEY }}" \
              --set-string global.key.domainkey="${{ vars.DOMAIN_KEY }}" \
              $set_args

        - name: Conditional rollout restart for Selected Deployments
          run: |
            echo "Restarting deployments for: ${{ needs.parse_services.outputs.services_list }}"
            IFS=',' read -ra SERVICES <<< "${{ needs.parse_services.outputs.services_list }}"
            for svc in "${SERVICES[@]}"; do
              case "$svc" in
                api) DEP="znode10xapi" ;;
                v2) DEP="znode10xapiv2" ;;
                admin) DEP="znode10xadmin" ;;
                pgbld) DEP="znode10xpagebuilder" ;;
                wbst) DEP="znode10xwebstore" ;;
                gateway) DEP="znode10xapigateways" ;;
                customtable) DEP="znode10xcustomtable" ;;
                a-commerce) DEP="znode10xapicp" ;;
                portal) DEP="znode10xcp" ;;
                cstm) DEP="znode10xcustomapi" ;;
                paymngr) DEP="znode10xpaymentmanager" ;;
                spreedly) DEP="znode10xpluginspreedly" ;;
                braintree) DEP="znode10xpluginbraintree" ;;
                reports) DEP="znode10xreports" ;;
                shipping) DEP="znode10xshippingmanager" ;;
                fedex) DEP="znode10xpluginfedex" ;;
                ups) DEP="znode10xpluginups" ;;
                azfunction) DEP="znode10xazfunctions" ;;
                graphqlapi) DEP="znode10xgraphqlapi" ;;
                taxmanager) DEP="znode10xtaxmanager" ;;
                avatax) DEP="znode10xavatax" ;;
                diagno) DEP="znode10xdiagnostic" ;;
                python) DEP="znode10xutility" ;;
                cc-api) DEP="znode10xcommerceconnectorapi" ;;
                cc-admin) DEP="znode10xcommerceconnectoradmin" ;;    
                *) echo "No deployment defined for: $svc"; continue ;;
              esac
              echo "Restarting deployment: $DEP"
              kubectl get deployment $DEP -n ${{ inputs.namespace }} >/dev/null 2>&1 \
              && kubectl rollout restart deployment $DEP -n ${{ inputs.namespace }} \
              || echo "Deployment $DEP not found. Skipping restart."
            done


  sync-acr-images:
    runs-on: ubuntu-latest
    needs: [webstore_deployment, pagebuilder_deployment, admin_deployment, api_deployment, customtable_build, gateway_build, api-v2_build, cp_build,  apicp_build, customapi_build, plugin_spreedly_build, plugin_braintree_build, azfunction_build, reports_api_build, payment_manager_build, shipping_manager_build, plugin_fedex_build, plugin_ups_build, taxmanager_build, graphqlapi_build, avatax_build, diagnostic_build, pythonapi_build, cc_api_build, cc_admin_build]
    if: always() &&
        inputs.environment == 'st' &&
      (
              needs.api_deployment.result == 'success' ||
              needs.api-v2_build.result == 'success' ||
              needs.customtable_build.result == 'success' ||
              needs.gateway_build.result == 'success' ||
              needs.azfunction_build.result == 'success' ||
              needs.webstore_deployment.result == 'success' ||
              needs.pagebuilder_deployment.result == 'success' ||
              needs.admin_deployment.result == 'success' ||
              needs.apicp_build.result == 'success' ||
              needs.cp_build.result == 'success' ||
              needs.customapi_build.result == 'success' ||
              needs.payment_manager_build.result == 'success' ||
              needs.plugin_spreedly_build.result == 'success' ||
              needs.plugin_braintree_build.result == 'success' ||
              needs.reports_api_build.result == 'success' ||
              needs.shipping_manager_build.result == 'success' ||
              needs.plugin_fedex_build.result == 'success' ||
              needs.plugin_ups_build.result == 'success' ||
              needs.taxmanager_build.result == 'success' ||
              needs.graphqlapi_build.result == 'success' ||
              needs.avatax_build.result == 'success'     ||
              needs.diagnostic_build.result == 'success' ||
              needs.pythonapi_build.result == 'success' || 
              needs.cc_api_build.result == 'success' ||
              needs.cc_admin_build.result == 'success'
              )
    steps:
    - name: Latest stage build
      run: |
          curl -X POST \
          -H "Authorization: token ${{ secrets.ACCESS_REPO }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/MRRSoft/znode10-tenant-devops/actions/workflows/sync-acr-to-central-india-acr.yml/dispatches \
          -d '{
            "ref": "master",
            "inputs": {
              "source_acr": "${{ github.event.inputs.source_acr || 'acrz10st' }}",
              "destination_acr": "${{ github.event.inputs.destination_acr || 'acrz10np' }}",
              "syncqaimage": "${{ github.event.inputs.syncqaimage || 'false' }}",
              "syncstageimage": "${{ github.event.inputs.syncstageimage || 'true' }}",
              "syncsanboximage": "${{ github.event.inputs.syncsanboximage || 'false' }}"
            }
          }'
      #  --atomic
      # - name: Helm Upgrade or Install DB Chart
      #   working-directory: ./helm-aks/znode10-helm-db
      #   run: |
      #     helm upgrade --install znode10-helm-db . \
      #       -f db-values.yml \
      #       --namespace ${{ github.event.inputs.namespace }} \
      #       --set global.clusterType=${{ vars.CLUSTER_TYPE }}
