name: Flush Redis Cache and Gateways Restart

on:
  workflow_dispatch:

   inputs:
      environment:
        type: choice
        description: Select Environment
        required: true
        options:
          - htfxnp
          - z10st
          - z10dmst
          - etnanp
          - knoxnp
          - htfxnp
          - knoxpr1
          - klrtnp-1
          - etnanpr1
          - apexnp
          - fwksnp
          - etnapr
          - klrtnpr
          - apexnpr
          - trngnp
          - z10atstage
          - z10int
          - etnaqa
          - z10qa

      gateway_restart:
        description: 'Restart Gateways'
        required: true
        default: false
        type: boolean 
        
      flush_redis:
        description: 'Flush Redis'
        required: true
        default: false
        type: boolean
    
      redis_role:
        description: 'Choose Redis Role to Flush (api or webstore)'
        required: false
        type: choice
        options:
          - api
          - webstore
        default: api
        

jobs:

  gateway_restart:
    if: ${{ github.event.inputs.gateway_restart == 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Kubernetes Set up
        uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}
          version: '1.19.9'
          
      - name: Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          
      - name: Apply and Restart Gateways  
        run: |  
          kubectl rollout restart deployment znode10xapigateways -n znode
          sleep 180
          echo "Waiting for all Gateway pods to be ready..."
          ATTEMPTS=30
          for i in $(seq 1 $ATTEMPTS); do
            DESIRED=$(kubectl get deployment znode10xapigateways -n znode -o jsonpath='{.spec.replicas}')
            READY=$(kubectl get deployment znode10xapigateways -n znode -o jsonpath='{.status.readyReplicas}')
            
            echo "ReadyReplicas: ${READY:-0}/${DESIRED:-0}"
            
            if [[ "$READY" == "$DESIRED" ]]; then
              echo "âœ… All gateway pods are up and running."
              break
            fi
            sleep 10
          done
      
          echo "Listing current Gateway pods:"
          kubectl get pods -n znode -l service=znode10xapigateways -o custom-columns="NAME:.metadata.name,STATUS:.status.phase"

      - name: Notify Google Chat
        if: always()
        run: |
          STATUS="${{ job.status }}"
          COLOR="ðŸŸ¡"
          if [[ "$STATUS" == "success" ]]; then COLOR="ðŸŸ¢"; elif [[ "$STATUS" == "failure" ]]; then COLOR="ðŸ”´"; fi

          URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TRIGGERED_BY="${{ inputs.triggered_by || github.triggering_actor }}"
          SERVICE_LIST_RAW="${{ needs.parse_services.outputs.services_list }}"
          
          if [[ -z "$SERVICE_LIST_RAW" ]]; then
            DEPLOYED_SERVICES="N/A"
          else
            IFS=',' read -ra ITEMS <<< "$SERVICE_LIST_RAW"
            DEPLOYED_SERVICES=$(printf '\n- `%s`' "${ITEMS[@]}")
          fi

          MESSAGE="${COLOR} *Gateways Restart Status:* \`$STATUS\`\n*Environment:* \`${{ inputs.environment }}\`\n*Gateways:* \`${{ inputs.gateway_restart }}\`\n*Triggered By:* \`$TRIGGERED_BY\`\n*Deployed Services:*${DEPLOYED_SERVICES}\n[ðŸ”— View Workflow Run]($URL)"

          curl -X POST -H 'Content-Type: application/json' \
            -d "{\"text\": \"$MESSAGE\"}" \
            "${{ vars.REDIS_ALERTS }}"
          

  flush-redis:
    if: ${{ github.event.inputs.flush_redis == 'true' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

      - name: Set up Kubeconfig
        run: |
            mkdir -p ~/.kube
            echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
        shell: bash

      - name: Find Redis Master Pod
        id: redis
        run: |
          echo "Looking for Redis master pod in '${{ github.event.inputs.environment }}' with role '${{ github.event.inputs.redis_role }}'..."

          # Get matching pods from the given environment namespace
          if [[ "${{ github.event.inputs.environment }}" == "etnaqa" && "${{ github.event.inputs.redis_role }}" == "api" ]]; then
            PODS=$(kubectl get pods -n znode -o jsonpath="{.items[*].metadata.name}" | tr ' ' '\n' | grep "znode10xetnaqa-redis-node")
          else
            PODS=$(kubectl get pods -n znode -o jsonpath="{.items[*].metadata.name}" | tr ' ' '\n' | grep redis | grep "${{ github.event.inputs.redis_role }}")
          fi

          echo "Candidate pods:"
          echo "$PODS"

          for pod in $PODS; do
            ROLE=$(kubectl exec -n znode "$pod" -- redis-cli ROLE | head -1 || echo "unknown")
            echo "Pod: $pod - Role: $ROLE"
            if [[ "$ROLE" == "master" ]]; then
              echo "pod_name=$pod" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          echo "No Redis master pod found for environment '${{ github.event.inputs.environment }}' and role '${{ github.event.inputs.redis_role }}'."
          exit 1



      - name: Flush Redis Master
        run: |
          echo "Flushing cache on Redis master pod: ${{ steps.redis.outputs.pod_name }}"
          kubectl exec -n znode ${{ steps.redis.outputs.pod_name }} -- redis-cli FLUSHALL

      - name: Notify Google Chat
        if: always()
        run: |
          STATUS="${{ job.status }}"
          COLOR="ðŸŸ¡"
          if [[ "$STATUS" == "success" ]]; then COLOR="ðŸŸ¢"; elif [[ "$STATUS" == "failure" ]]; then COLOR="ðŸ”´"; fi

          URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TRIGGERED_BY="${{ inputs.triggered_by || github.triggering_actor }}"
          SERVICE_LIST_RAW="${{ needs.parse_services.outputs.services_list }}"
          
          if [[ -z "$SERVICE_LIST_RAW" ]]; then
            DEPLOYED_SERVICES="N/A"
          else
            IFS=',' read -ra ITEMS <<< "$SERVICE_LIST_RAW"
            DEPLOYED_SERVICES=$(printf '\n- `%s`' "${ITEMS[@]}")
          fi

          MESSAGE="${COLOR} *Redis Flush Status:* \`$STATUS\`\n*Environment:* \`${{ inputs.environment }}\`\n*Redis:* \`${{ inputs.redis_role }}\`\n*Triggered By:* \`$TRIGGERED_BY\`\n*Deployed Services:*${DEPLOYED_SERVICES}\n[ðŸ”— View Workflow Run]($URL)"

          curl -X POST -H 'Content-Type: application/json' \
            -d "{\"text\": \"$MESSAGE\"}" \
            "${{ vars.REDIS_ALERTS }}"
          
