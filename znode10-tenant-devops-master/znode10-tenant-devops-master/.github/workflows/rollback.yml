name: Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Select Environment
        required: true
        options:
          - uat
          - etnadev
          - knoxdev
          - sandbox
          - trng

      rollback_tag:
        description: Enter the tag to rollback the deployment (z10-TagName)
        required: true
        default: z10-TagName

      services:
        description: 'Deploy Build from Prod ACR (Set the following values to true)'
        required: false
        default: '{"wbst": false, "admin": false, "api": false, "gateway": false, "table": false, "v2": false, "custom": false, "sqldb": false, "plugin": false, "a-commerce": false, "getcp": false, "portal": false, "paymngr": false, "spreedly": false, "braintree": false }'  
        type: string

    #   trigger_db_deploy:
    #     description: 'Deploy Databases'
    #     required: false
    #     default: false
    #     type: boolean

      all:
        description: 'Deploy All Services to Tenant'
        required: false
        default: false
        type: boolean

    #   choice:
    #     description: 'Send email notification?'
    #     type: choice
    #     required: false
    #     options:
    #       - 'Yes'
    #       - 'No'

env:
  IMAGE_TAG: z10-${{ github.event.inputs.rollback_tag }}

jobs:
  # Parse the JSON input and create an environment variable listing all services that need deployment
  parse_services:
    runs-on: ubuntu-latest
    outputs:
      services_list: ${{ steps.set_services.outputs.services_list }}
    steps:
      - name: Parse services JSON
        id: set_services
        run: |
          SERVICES=$(echo '${{ github.event.inputs.services }}' | jq -r 'to_entries[] | select(.value == true) | .key' | paste -sd "," -)
          echo "::set-output name=services_list::${SERVICES}"

      - name: Debug services list
        run: |
          echo "Services list: ${{ steps.set_services.outputs.services_list }}"

#   trigger_db_deploy:
#     runs-on: ubuntu-latest
#     environment: ${{ github.event.inputs.environment }}
#     if: github.event.inputs.trigger_db_deploy == 'true'
#     steps:
#       - uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

#       - name: DB Trigger 
#         run: |
#           curl -X POST \
#           -H "Authorization: token ${{ secrets.ACCESS_REPO }}" \
#           -H "Accept: application/vnd.github.v3+json" \
#             https://api.github.com/repos/MRRSoft/znode10-tenant-devops/actions/workflows/db_deploy_on_tenants.yml/dispatches \
#           -d '{
#             "ref": "master",
#             "inputs": {
#             "environment": "${{ inputs.environment }}"
#                   }
#             }'

#############################################################################################################

#   build_webstore:
#     name: Build WebStore
#     runs-on: ubuntu-latest
#     if: (contains(needs.parse_services.outputs.services_list, 'wbst') || github.event.inputs.all == 'true') && github.event.inputs.environment != 'etnadev' && github.event.inputs.environment != 'knoxdev'
#     needs: parse_services
#     environment: ${{ github.event.inputs.environment }}
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2
#         with:
#           repository: MRRSoft/znode10-webstore
#           token: ${{ secrets.ACCESS_REPO }}
#           ref: master

#       - name: Docker Login
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.ACRUN }}
#           password: ${{ secrets.ACRPW }}
#           registry: ${{ secrets.ACR_SERVER }}.azurecr.io

#       - name: Set environment variables based on environment input
#         id: env_vars
#         run: |
#           if [[ "${{ github.event.inputs.environment }}" == "uat" ]]; then
#             echo "COMPOSE_FILE=docker-compose-release.yml" >> $GITHUB_ENV
#             echo "ENV_FILE=.env.release" >> $GITHUB_ENV
#           elif [[ "${{ github.event.inputs.environment }}" == "sandbox" ]]; then
#             echo "COMPOSE_FILE=docker-compose-usds.yml" >> $GITHUB_ENV
#             echo "ENV_FILE=.env.usds" >> $GITHUB_ENV
#           elif [[ "${{ github.event.inputs.environment }}" == "trng" ]]; then
#             echo "COMPOSE_FILE=docker-compose-trng.yml" >> $GITHUB_ENV
#             echo "ENV_FILE=.env.trng" >> $GITHUB_ENV
#           else
#             echo "Unsupported environment: ${{ github.event.inputs.environment }}"
#             exit 1
#           fi
  
#       - name: Docker Compose Build
#         working-directory: ./
#         run: docker compose -f ${{ env.COMPOSE_FILE }} --env-file ${{ env.ENV_FILE }} build --build-arg EnvFile=${{ env.ENV_FILE }}

#       - name: Docker Compose Push
#         working-directory: ./
#         run: docker compose -f ${{ env.COMPOSE_FILE }} --env-file ${{ env.ENV_FILE }} push --ignore-push-failures

#       - name: Docker Logout
#         if: always()
#         continue-on-error: true
#         run: docker logout ${{ secrets.ACR_SERVER }}.azurecr.io

#   deploy_webstore:
#     name: Deploy WebStore
#     runs-on: ubuntu-latest
#     needs: build_webstore
#     environment: ${{ github.event.inputs.environment }}
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v2
#         with: 
#             ref: master

#       - name: Login to Azure
#         uses: azure/login@v1
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}

#       - name: Set up Kubeconfig
#         run: |
#             mkdir -p ~/.kube
#             echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
#         shell: bash
          
#       - name: delete znode pods
#         working-directory: ./tenants/${{ github.event.inputs.environment }}/terraform
#         run: |
#           kubectl delete configmap znode10xwebstore -n znode
#           terraform init && terraform apply -target=kubernetes_config_map.znode10xwebstore -auto-approve
#           cd ../../${{ github.event.inputs.environment }}
#           kubectl apply -f deploy/app/pods/kube-deploy-webstore.yml -n znode 
#           kubectl rollout restart deployment znode10xwebstore -n znode

#       # kubectl set image deployment/znode10xwebstore znode10xwebstore=${{ secrets.PROD_ACR_SERVER }}/znode10webstore:${{ env.IMAGE_TAG }} -n znode 
      
  deploy_apps:
    name: Deploy
    runs-on: ubuntu-latest
    needs: parse_services
    environment: ${{ github.event.inputs.environment }}
    steps:

      - name: Set Environment Path
        id: set_env_path
        run: |
          if [[ "${{ github.event.inputs.environment }}" == "uat" ]]; then
            echo "env_path=tenants/uat" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment }}" == "knoxdev" ]]; then
            echo "env_path=tenants/knox/dev" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment }}" == "etnadev" ]]; then
            echo "env_path=tenants/etna/dev" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment }}" == "sandbox" ]]; then
            echo "env_path=tenants/sandbox" >> $GITHUB_ENV
          elif [[ "${{ github.event.inputs.environment }}" == "trng" ]]; then
            echo "env_path=tenants/trng" >> $GITHUB_ENV
          fi

      - name: Checkout Code
        uses: actions/checkout@v2
        with: 
          ref: master
          
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Kubeconfig
        run: |
            mkdir -p ~/.kube
            echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
        shell: bash

      - name: Docker Login to Prod ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.PROD_ACR_SERVER }}
          username: ${{ secrets.ACRUNPROD }}
          password: ${{ secrets.ACRPWPROD }}    

      - name: API Image
        working-directory: ./${{ env.env_path }}/terraform
        if: contains(needs.parse_services.outputs.services_list, 'api') || github.event.inputs.all == 'true'
        run: |
          kubectl delete configmap znode10xapi -n znode
          terraform init && terraform apply -target=kubernetes_config_map.znode10xapi -auto-approve
          cd /home/runner/work/znode10-tenant-devops/znode10-tenant-devops/${{ env.env_path }}/
          kubectl apply -f deploy/app/pods/kube-deploy-api.yml -n znode
          kubectl set image deployment/znode10xapi znode10xapicontainer=${{ secrets.PROD_ACR_SERVER }}/znode10api:${{ env.IMAGE_TAG }} -n znode 

      - name: API-V2 Image
        working-directory: ./${{ env.env_path }}/terraform
        if: contains(needs.parse_services.outputs.services_list, 'v2') || github.event.inputs.all == 'true'
        run: |
          kubectl delete configmap znode10xcustomer -n znode
          terraform init && terraform apply -target=kubernetes_config_map.znode10xcustomer -auto-approve
          cd /home/runner/work/znode10-tenant-devops/znode10-tenant-devops/${{ env.env_path }}/
          kubectl apply -f deploy/app/pods/kube-deploy-api-v2.yml -n znode 
          kubectl set image deployment/znode10xcustomer znode10xcustomer=${{ secrets.PROD_ACR_SERVER }}/znode10customer:${{ env.IMAGE_TAG }} -n znode 

      - name: Admin Image
        working-directory: ./${{ env.env_path }}/terraform
        if: contains(needs.parse_services.outputs.services_list, 'admin') || github.event.inputs.all == 'true'
        run: |
          kubectl delete configmap znode10xadmin -n znode
          terraform init && terraform apply -target=kubernetes_config_map.znode10xadmin -auto-approve
          cd /home/runner/work/znode10-tenant-devops/znode10-tenant-devops/${{ env.env_path }}/
          kubectl apply -f deploy/app/pods/kube-deploy-admin.yml -n znode 
          kubectl set image deployment/znode10xadmin znode10xadmin=${{ secrets.PROD_ACR_SERVER }}/znode10admin:${{ env.IMAGE_TAG }} -n znode 
                   
      - name: Custom API Image
        working-directory: ./${{ env.env_path }}/terraform
        if: (contains(needs.parse_services.outputs.services_list, 'custom') || github.event.inputs.all == 'true') && github.event.inputs.environment != 'etnadev' && github.event.inputs.environment != 'knoxdev'
        run: |
          kubectl delete configmap znode10customapi -n znode
          terraform init && terraform apply -target=kubernetes_config_map.znode10customapi -auto-approve
          cd /home/runner/work/znode10-tenant-devops/znode10-tenant-devops/${{ env.env_path }}/
          kubectl apply -f deploy/app/pods/kube-deploy-custom-api.yml -n znode
          kubectl set image deployment/znode10customapi znode10customapicontainer=${{ secrets.PROD_ACR_SERVER }}/znode10customapi:${{ env.IMAGE_TAG }} -n znode 

      - name: Custom Table Image
        working-directory: ./${{ env.env_path }}/terraform
        if: contains(needs.parse_services.outputs.services_list, 'table') || github.event.inputs.all == 'true'
        run: |
          kubectl delete configmap znode10xcustomtable -n znode
          terraform init && terraform apply -target=kubernetes_config_map.znode10xcustomtable -auto-approve
          cd /home/runner/work/znode10-tenant-devops/znode10-tenant-devops/${{ env.env_path }}/
          kubectl apply -f deploy/app/pods/kube-deploy-customtable.yml -n znode
          kubectl set image deployment/znode10xcustomtable znode10xcustomtable=${{ secrets.PROD_ACR_SERVER }}/znode10customtable:${{ env.IMAGE_TAG }} -n znode 

      - name: Payment Image
        working-directory: ./${{ env.env_path }}/terraform
        if: contains(needs.parse_services.outputs.services_list, 'payment') || github.event.inputs.all == 'true'
        run: |
          kubectl delete configmap znode10xpayment -n znode
          terraform init && terraform apply -target=kubernetes_config_map.znode10xpayment -auto-approve
          cd /home/runner/work/znode10-tenant-devops/znode10-tenant-devops/${{ env.env_path }}/
          kubectl apply -f deploy/app/pods/kube-deploy-payment.yml -n znode
          kubectl set image deployment/znode10xpayment znode10xpayment=${{ secrets.PROD_ACR_SERVER }}/znode10payment:${{ env.IMAGE_TAG }} -n znode 

      # - name: SQL DB Image
      #   working-directory: ./${{ env.env_path }}/terraform
      #   if: contains(needs.parse_services.outputs.services_list, 'sqldb') || github.event.inputs.all == 'true'
      #   run: |
      #     kubectl delete configmap znode10xapi -n znode
      #     terraform init && terraform apply -target=kubernetes_config_map.znode10xapi -auto-approve
      #     
      #     kubectl apply -f deploy/app/pods/kube-deploy-api.yml -n znode
      #     kubectl set image deployment/znode10xapi znode10xapicontainer=${{ secrets.PROD_ACR_SERVER }}/znode10api:${{ env.IMAGE_TAG }} -n znode 

      # - name: Webstore Image
      #   working-directory: ./${{ env.env_path }}/terraform
      #   if: (contains(needs.parse_services.outputs.services_list, 'wbst') || github.event.inputs.all == 'true') && github.event.inputs.environment != 'etnadev' && github.event.inputs.environment != 'knoxdev'
      #   run: |
      #     kubectl delete configmap znode10xwebstore -n znode
      #     terraform init && terraform apply -target=kubernetes_config_map.znode10xwebstore -auto-approve 
      #     kubectl apply -f deploy/app/pods/kube-deploy-webstore.yml -n znode 
      #     kubectl set image deployment/znode10xwebstore znode10xwebstore=${{ secrets.PROD_ACR_SERVER }}/znode10webstore:${{ env.IMAGE_TAG }} -n znode 

      - name: Api-Cp Image
        working-directory: ./${{ env.env_path }}/terraform
        if: (contains(needs.parse_services.outputs.services_list, 'api-cp') || github.event.inputs.all == 'true') && github.event.inputs.environment != 'etnadev'
        run: |
          kubectl delete configmap znode10apicp -n znode
          terraform init && terraform apply -target=kubernetes_config_map.znode10apicp -auto-approve
          cd /home/runner/work/znode10-tenant-devops/znode10-tenant-devops/${{ env.env_path }}/
          kubectl apply -f deploy/app/pods/kube-deploy-api-cp.yml -n znode
          kubectl set image deployment/znode10apicp znode10apicpcontainer=${{ secrets.PROD_ACR_SERVER }}/znode10commerceportalapiimage:${{ env.IMAGE_TAG }} -n znode 

      - name: Apigateway-cp Image
        working-directory: ./${{ env.env_path }}/terraform
        if: (contains(needs.parse_services.outputs.services_list, 'gateway-cp') || github.event.inputs.all == 'true' ) && github.event.inputs.environment != 'etnadev'
        run: |
          kubectl delete configmap znode10xapigateway-cp -n znode
          terraform init && terraform apply -target=kubernetes_config_map.znode10xapigateway-cp -auto-approve
          cd /home/runner/work/znode10-tenant-devops/znode10-tenant-devops/${{ env.env_path }}/
          kubectl apply -f deploy/app/pods/kube-deploy-apigateway-cp.yml -n znode 
          kubectl set image deployment/znode10xapigateway-cp znode10xapigateway-cp=${{ secrets.PROD_ACR_SERVER }}/znode10cpapigateways:${{ env.IMAGE_TAG }} -n znode 

      - name: Commerceportal Image
        working-directory: ./${{ env.env_path }}/terraform
        if: (contains(needs.parse_services.outputs.services_list, 'commerce-portal') || github.event.inputs.all == 'true' ) && github.event.inputs.environment != 'etnadev' && github.event.inputs.environment != 'knoxdev'
        run: |
          kubectl delete configmap znode10xcp -n znode
          terraform init && terraform apply -target=kubernetes_config_map.znode10xcp -auto-approve
          cd /home/runner/work/znode10-tenant-devops/znode10-tenant-devops/${{ env.env_path }}/
          kubectl apply -f deploy/app/pods/kube-deploy-cp.yml -n znode 
          kubectl set image deployment/znode10xcp znode10xcp=${{ secrets.PROD_ACR_SERVER }}/znode10cpportalimage:${{ env.IMAGE_TAG }} -n znode   
          sleep 30

      - name: API Gateways Image
        working-directory: ./${{ env.env_path }}/terraform
        if: contains(needs.parse_services.outputs.services_list, 'gateway') || github.event.inputs.all == 'true'
        run: |
          kubectl delete configmap znode10xapigateways -n znode 
          terraform init && terraform apply -target=kubernetes_config_map.znode10xapigateways -auto-approve
          cd /home/runner/work/znode10-tenant-devops/znode10-tenant-devops/${{ env.env_path }}/
          kubectl apply -f deploy/app/pods/kube-deploy-apigateways.yml -n znode
          kubectl set image deployment/znode10xapigateways znode10xapigateways=${{ secrets.PROD_ACR_SERVER }}/znode10apigateways:${{ env.IMAGE_TAG }} -n znode 
           

      - name: Docker Logout from Prod
        if: always()
        continue-on-error: true
        run: docker logout ${{ secrets.PROD_ACR_SERVER }}