name: Deploy Tenant On Local Cluster using Helm Chart

on:
  workflow_dispatch:
    inputs:
      tenant:
        description: 'Client/Tenant Name'
        required: true
      environment:
        description: 'Environment Type'
        required: true
        default: 'npr'
      namespace:
        description: 'Namespace'
        required: true
        default: 'znode'


jobs:
  deploy:
    name: Deploy Znode10x Helm Chart
    runs-on: [self-hosted, 100.195]
    environment: ${{ github.event.inputs.tenant }}${{ github.event.inputs.environment }}

    steps:
    - name: Checkout Template Repository
      uses: actions/checkout@v2
      with:
        repository: MRRSoft/znode10-devops-templates
        token: ${{ secrets.ACCESS_REPO }}
        ref: master

    - name: Kubernetes Set up
      uses: azure/k8s-set-context@v1
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        version: '1.19.9'

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.13.2

    - name: Helm install znode10 chart
      working-directory: ./helm-aks/znode10-helm
      run: |
        echo "Deploying to environment: ${{ inputs.tenant }}${{ inputs.environment }}"
        echo '${{ vars.IMAGE_TAGS }}' > image_tags.json
        set_args=""
        for service in $(jq -r 'keys[]' image_tags.json); do
          tag=$(jq -r --arg svc "$service" '.[$svc]' image_tags.json)
          if [[ -n "$tag" && "$tag" != "null" ]]; then
            echo "✅ Using provided tag for $service: $tag"
          else
            current_image=$(kubectl get deployment $service -n ${{ inputs.namespace }} -o jsonpath='{.spec.template.spec.containers[0].image}' || true)
            if [[ -n "$current_image" ]]; then
              current_tag=$(echo "$current_image" | awk -F':' '{print $2}')
              tag="$current_tag"
            else
              echo "❌ ERROR: Deployment for $service not found. Cannot continue."
              exit 1
            fi
          fi
          set_args="$set_args --set-string resources.$service.image.tag=$tag"
        done

        helm upgrade --install znode10x . \
          --namespace ${{ inputs.namespace }} \
          -f default-values.yml \
          -f values.yml \
          -f ${{ github.event.inputs.tenant }}-${{ inputs.environment }}-values.yml \
          -f ingress-values.yml \
          -f ${{ vars.CATEGORY }}-values.yml \
          --set global.tenant=${{ inputs.tenant }} \
          --set global.environment=${{ inputs.environment }} \
          --set global.domain=${{ vars.URL }} \
          --set global.webstoreURL=${{ vars.WEBSTORE_URL }} \
          --set global.imageRegistry=${{ vars.ACR_SERVER }} \
          --set global.imagePullSecrets=${{ vars.BLACKBOX }} \
          --set global.tenantacr.imageRegistry=${{ vars.TENANT_ACR_SERVER }} \
          --set global.clusterType=${{ vars.CLUSTER_TYPE }} \
          --set global.ingressClassName=${{ inputs.tenant }}${{ inputs.environment }} \
          --set-string global.db.wbst_db='${{ secrets.DB_WBST }}' \
          --set-string global.db.pymt_db='${{ secrets.DB_PYMT }}' \
          --set-string global.db.hgfr_db='${{ secrets.DB_HGFR }}' \
          --set-string global.db.rceg_db='${{ secrets.DB_RCEG }}' \
          --set-string storage.name="${{ secrets.STORAGE_NAME }}" \
          --set-string storage.url="https://${{ secrets.STORAGE_NAME }}.blob.core.windows.net" \
          --set-string storage.connection_string="${{ secrets.STORAGE_CONN }}" \
          --set-string global.newrelic.licensekey="${{ secrets.NEWRELIC_KEY }}" \
          --set-string global.key.domainkey="${{ vars.DOMAIN_KEY }}" \
          $set_args

    # - name: Apply ingress and restart
    #   run: |
    #     echo "Waiting 60 seconds to ensure ingress controller is ready..."
    #     sleep 60
    #     kubectl rollout restart daemonset ${{ github.event.inputs.tenant }}${{ github.event.inputs.environment }}-ingress-nginx-controller -n ${{ github.event.inputs.namespace}}
